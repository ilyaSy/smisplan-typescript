{"version":3,"sources":["utils/sortData.ts","utils/hooks/useGetDataMeta.tsx","components/UI/TableEditableCell/TableEditableCell.module.scss","components/ActionMenu/ActionMenu.module.scss","components/UI/DropdownMenu/DropdownMenu.module.scss","components/UI/FilterPanel/FilterPanel.module.scss","components/UI/ColumnsPanel/ColumnsPanel.module.scss","components/UI/Table/Table.module.scss","components/DataTable/DataTable.module.scss","utils/mapMetadataToColumns.ts","components/UI/TableEditableRow/index.tsx","components/UI/TableEditableCell/index.tsx","components/TableEditableCell/index.tsx","components/UI/TableExpandableRow.tsx","components/UI/TableFilterIcon.tsx","components/Modals/DataEditModal/index.tsx","components/Modals/ConfirmModal/index.tsx","components/ActionMenu/createActions.tsx","components/UI/DropdownMenu/index.tsx","components/ActionMenu/index.tsx","components/UI/Table/index.tsx","components/UI/ColumnsPanel/index.tsx","components/UI/FilterPanel/index.tsx","components/DataTable/index.tsx"],"names":["sortData","key","direction","type","a","b","valueA","valueB","useGetDataMeta","tablename","useState","data","setData","useDictionaryContext","dictionary","setDictionary","useDataSelector","sourceData","isErrorData","isError","isLoadingData","isLoading","useMetadataSelector","metadata","isErrorMetadata","isLoadingMetadata","dispatch","useDispatch","mapDictionaryCb","useCallback","value","metadataProperty","find","property","id","split","map","v","text","join","includes","useEffect","dataGetAction","metadataGetAction","filter","forEach","validValues","Object","keys","length","d","mapValues","module","exports","mapMetadataToColumns","c","metadataColumn","dataIndex","sorter","compare","undefined","multiple","sort","tableIndex","EditableContext","createContext","DataTableEditableRow","props","Form","useForm","form","component","Provider","TableEditableCell","title","inputRef","editing","editable","children","handleSave","record","handleToggleEdit","restProps","childNode","Item","style","margin","name","rules","required","message","ref","onPressEnter","onBlur","className","classes","paddingRight","onClick","DataTableEditableCell","useGetTablename","setEditing","useRef","useContext","current","focus","setFieldsValue","save","validateFields","values","dataUpdateAction","convertDataItem","console","log","TableExpandableRow","rowExpandable","expandedRowRender","TableFilterIcon","filtered","placement","FilterOutlined","fontSize","color","DataEditModal","isOpen","onEditHandler","onAddHandler","onClose","formData","formItems","setFormItems","initialValues","setInitialValues","m","label","disabled","isEditable","ModalWithForm","getTableParameters","addMenuTitle","okButtonTitle","handleOk","handleClose","additionalButtons","confirm","Modal","showConfirmModal","onOk","onCancel","onFinally","description","okText","icon","ExclamationCircleOutlined","content","okType","cancelText","handleDummyClick","info","DropdownMenu","menuItems","menuItem","index","Divider","SubMenu","items","subMenuItem","ActionMenu","dataItem","tableParameters","openModal","setOpenModal","handleEdit","actions","handleOpen","handleDelete","hasDiscussion","push","CalendarFilled","hasEditMenu","EditFilled","hasSetStatusMenu","entries","status","statusKey","statusInfo","hasDeleteButton","DeleteFilled","hasNotificationButton","BellOutlined","createActions","t","dataDeleteAction","dataAddAction","DataAddModal","modalTablename","modalInitialValues","theme","mainQuestions","Button","overlay","trigger","DataTable","columns","usePrintPDFContext","setDataPrintRef","setDataPrintMode","dataPrintMode","dataRef","page","setPage","pageSize","setPageSize","hasActionMenu","useMemo","action","getDefaultSorter","field","Array","isArray","defaultSortField","indexOf","defaultSortDirection","initialVisible","columnsData","setColumnsData","visible","setVisible","openPanel","closePanel","resetColumns","setFields","showInTable","handleSubmit","prev","columnData","ColumnsPanelButtons","OrderedListOutlined","ColumnsPanel","width","preserve","labelCol","span","wrapperCol","onFinish","onFinishFailed","formItem","valuePropName","initialValue","marginBottom","marginTop","htmlType","useColumnsDrawer","tableColumns","column","invertDictionary","invert","fromEntries","isInlineEditable","defaultSortOrder","sortOrder","filterIcon","onCell","render","isTagged","tag","tableColumn","Math","ceil","visibleResetButton","setVisibleResetButton","filterData","setFilterData","e","handleReset","resetFields","reduce","acc","FilterButtons","FilterFilled","display","FilterPanel","isFilter","TextArea","allowClear","filterOption","option","RegExp","test","mode","showSearch","options","format","showTime","textAlign","useFilterDrawer","handleChangePage","nextPage","TableTitle","showSizeChanger","onChange","total","locale","ruRU","dataSource","tableLayout","components","body","row","TableEditableRow","cell","rowClassName","bordered","loading","size","expandable","sticky","pagination","position","table","Title","Typography","setTableParameters","center","LoadingComponent","level"],"mappings":"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","file":"static/js/5.85796b37.chunk.js","sourcesContent":["import { TData } from \"../types/TData\";\r\nimport { TDataTypes } from \"../types/TDataTypes\";\r\n\r\nconst sortData =\r\n  (key: string, direction: \"ascend\" | \"descend\" = \"ascend\", type?: TDataTypes) =>\r\n  (a: TData, b: TData) =>\r\n  {\r\n    const valueA = type && type === 'number' ? +a[key] : a[key];\r\n    const valueB = type && type === 'number' ? +b[key] : b[key];\r\n\r\n    if (valueA < valueB) return direction === \"ascend\" ? -1 : 1;\r\n    if (valueA > valueB) return direction === \"ascend\" ? 1 : -1;\r\n    return 0;\r\n  }\r\n\r\nexport default sortData;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { mapValues } from \"lodash\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport useDataSelector from \"../../storages/selectors/data\";\r\nimport useMetadataSelector from \"../../storages/selectors/metadata\";\r\nimport { dataGetAction } from \"../../storages/actions/data\";\r\nimport metadataGetAction from \"../../storages/actions/metadata\";\r\nimport useDictionaryContext from \"../../context/DictionaryContext\";\r\nimport { TData } from \"../../types/TData\";\r\n\r\nexport const useGetDataMeta = (tablename: string) => {\r\n  const [ data, setData ] = useState<TData[]>([]);\r\n  const { dictionary, setDictionary } = useDictionaryContext();\r\n\r\n  const { data: sourceData, isError: isErrorData, isLoading: isLoadingData } = useDataSelector();\r\n  const { data: metadata, isError: isErrorMetadata, isLoading: isLoadingMetadata } = useMetadataSelector();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const mapDictionaryCb = useCallback((value: string, key: string) => {\r\n    const metadataProperty = metadata?.find((property) => property.id === key);\r\n    if (metadataProperty && metadataProperty.type === 'multi-select' && dictionary[key]){\r\n      return value.split(',').map((v) => dictionary[key][v].text).join(', ')\r\n    } else if (metadataProperty && ['select', 'checkbox'].includes(metadataProperty.type)  && dictionary[key] && dictionary[key][value]) {\r\n      return dictionary[key][value].text\r\n    }\r\n    return value;\r\n  }, [metadata, dictionary])\r\n\r\n  useEffect(() => {\r\n    dispatch(dataGetAction(tablename));\r\n    dispatch(metadataGetAction(tablename));\r\n  }, [tablename, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (metadata) {\r\n      metadata\r\n        .filter((property) => ['select', 'multi-select', 'checkbox'].includes(property.type))\r\n        .forEach((property) => setDictionary(property.id, property.validValues))\r\n    }\r\n  }, [metadata, setDictionary]);\r\n\r\n  useEffect(() => {\r\n    if (sourceData && metadata && Object.keys(dictionary).length) {\r\n      setData(() => sourceData.map((d) => mapValues(d, mapDictionaryCb)));\r\n    }\r\n  }, [sourceData, metadata, dictionary, mapDictionaryCb]);\r\n\r\n  return {\r\n    data, isErrorData, isLoadingData,\r\n    metadata, isErrorMetadata, isLoadingMetadata\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editable-cell\":\"TableEditableCell_editable-cell__LXwkw\",\"editable-cell-value-wrap\":\"TableEditableCell_editable-cell-value-wrap__1BVb7\",\"editable-row\":\"TableEditableCell_editable-row__2ctbF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"action-menu\":\"ActionMenu_action-menu__1Quqs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropdown-menu\":\"DropdownMenu_dropdown-menu__2hkVv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter-button\":\"FilterPanel_filter-button__3r320\",\"reset-filter-button\":\"FilterPanel_reset-filter-button__3mx_s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select-columns-button\":\"ColumnsPanel_select-columns-button__3wepJ\",\"reset-select-columns-button\":\"ColumnsPanel_reset-select-columns-button__2E4XD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3RMoX\",\"hidden-pagination\":\"Table_hidden-pagination__3y5Zo\",\"table-title\":\"Table_table-title__2Rdcb\",\"table-title-row-10\":\"Table_table-title-row-10__2UTBH\",\"table-title-row-20\":\"Table_table-title-row-20__3eD46\",\"table-title-row-30\":\"Table_table-title-row-30__2Zw_q\",\"table-title-row-40\":\"Table_table-title-row-40__3YZXE\",\"table-title-row-50\":\"Table_table-title-row-50__EDFiG\",\"table-title-row-60\":\"Table_table-title-row-60__1apef\",\"table-title-row-70\":\"Table_table-title-row-70__2xsdo\",\"table-title-row-80\":\"Table_table-title-row-80__3EVn2\",\"table-title-row-90\":\"Table_table-title-row-90__IyfPo\",\"table-title-row-100\":\"Table_table-title-row-100__29P3U\",\"table-title-row-110\":\"Table_table-title-row-110__2Qni0\",\"table-title-row-120\":\"Table_table-title-row-120__3zTSb\",\"table-title-row-130\":\"Table_table-title-row-130__lOny3\",\"table-title-row-140\":\"Table_table-title-row-140__1C6Fe\",\"table-title-row-150\":\"Table_table-title-row-150__1kRW3\",\"table-title-row-160\":\"Table_table-title-row-160__XAbUV\",\"table-title-row-170\":\"Table_table-title-row-170__1O8_m\",\"table-title-row-180\":\"Table_table-title-row-180__38rnB\",\"table-title-row-190\":\"Table_table-title-row-190__11sYK\",\"table-title-row-200\":\"Table_table-title-row-200__1rFw_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"DataTable_center__-2FaP\"};","import sortData from './sortData';\r\nimport { TColumn } from '../types/TColumn';\r\nimport { TData } from '../types/TData';\r\n\r\ntype TMapMetadataToColumns = (\r\n  metadata: TData[],\r\n) => Record<string, TColumn>[]\r\n\r\nconst mapMetadataToColumns: TMapMetadataToColumns = (metadata) => {\r\n  const columns = metadata\r\n    .filter((c) => c.id !== 'specificParameters')\r\n    .map((metadataColumn) => {\r\n      const column: TData = {\r\n        ...metadataColumn,\r\n        dataIndex: metadataColumn.id,\r\n        key: metadataColumn.id,\r\n        sorter: {\r\n          compare: sortData(metadataColumn.id, undefined, metadataColumn.type),\r\n          multiple: 1,\r\n        },\r\n      }\r\n\r\n      return column;\r\n    })\r\n    .sort((a, b) => a.tableIndex - b.tableIndex)\r\n    // .filter((c: any) => !filterRealColumns || (filterRealColumns && c.showInTable && c.type !== 'fulltext'))\r\n\r\n  return columns;\r\n}\r\n\r\nexport default mapMetadataToColumns;\r\n","import { createContext } from 'react';\r\nimport { Form } from 'antd';\r\nimport { FormInstance } from 'antd/lib/form';\r\n\r\nexport const EditableContext = createContext<FormInstance<any> | null>(null);\r\n\r\ninterface IEditableRowProps {\r\n  id: number;\r\n}\r\n\r\nconst DataTableEditableRow: React.FC<IEditableRowProps> = ({ id, ...props }) => {\r\n  const [form] = Form.useForm();\r\n  return (\r\n    <Form form={form} component={false}>\r\n      <EditableContext.Provider value={form}>\r\n        <tr {...props} />\r\n      </EditableContext.Provider>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default DataTableEditableRow;\r\n","import React from 'react';\r\nimport { Form, Input } from 'antd';\r\nimport classes from './TableEditableCell.module.scss';\r\n\r\ninterface Item {\r\n  key: string;\r\n  name: string;\r\n  age: string;\r\n  address: string;\r\n}\r\n\r\ninterface EditableCellProps {\r\n  title: React.ReactNode;\r\n  inputRef: React.RefObject<Input>;\r\n  editing: boolean;\r\n  editable: boolean;\r\n  children: React.ReactNode;\r\n  dataIndex: keyof Item;\r\n  record: Item;\r\n  handleSave: () => void;\r\n  handleToggleEdit: () => void;\r\n}\r\n\r\nconst TableEditableCell: React.FC<EditableCellProps> = ({\r\n  title,\r\n  inputRef,\r\n  editing,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  handleSave,\r\n  handleToggleEdit,\r\n  ...restProps\r\n}) => {\r\n  let childNode = children;\r\n\r\n  if (editable) {\r\n    childNode = editing ? (\r\n      <Form.Item\r\n        style={{ margin: 0 }}\r\n        name={ dataIndex }\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: `${title} is required.`,\r\n          },\r\n        ]}\r\n      >\r\n        <Input\r\n          ref={inputRef}\r\n          onPressEnter={handleSave}\r\n          onBlur={handleSave}\r\n        />\r\n      </Form.Item>\r\n    ) : (\r\n      <div\r\n        className={classes[\"editable-cell-value-wrap\"]}\r\n        style={{ paddingRight: 24 }}\r\n        onClick={handleToggleEdit}\r\n      >\r\n        {children}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <td {...restProps}>{childNode}</td>;\r\n};\r\n\r\nexport default TableEditableCell;\r\n","import React, { useState, useEffect, useRef, useContext } from 'react';\r\nimport { Input } from 'antd';\r\nimport { useDispatch } from 'react-redux';\r\nimport { EditableContext } from '../UI/TableEditableRow';\r\nimport { convertDataItem } from '../../utils/convertDataItem';\r\nimport useGetTablename from '../../utils/hooks/useGetTablename';\r\nimport useDictionaryContext from '../../context/DictionaryContext';\r\nimport { dataUpdateAction } from '../../storages/actions/data';\r\nimport useMetadataSelector from '../../storages/selectors/metadata';\r\nimport TableEditableCell from '../UI/TableEditableCell';\r\n\r\ninterface Item {\r\n  key: string;\r\n  name: string;\r\n  age: string;\r\n  address: string;\r\n}\r\n\r\nexport interface EditableCellProps {\r\n  title: React.ReactNode;\r\n  editable: boolean;\r\n  children: React.ReactNode;\r\n  dataIndex: keyof Item;\r\n  record: Item;\r\n  // handleSave: (record: Item) => void;\r\n  // tablename: string,\r\n}\r\n\r\nconst DataTableEditableCell: React.FC<EditableCellProps> = ({\r\n  title,\r\n  editable,\r\n  children,\r\n  dataIndex,\r\n  record,\r\n  // tablename,\r\n  ...restProps\r\n}) => {\r\n  const { dictionary } = useDictionaryContext();\r\n  const {data: metadata} = useMetadataSelector();\r\n  const tablename = useGetTablename();\r\n\r\n  const [editing, setEditing] = useState(false);\r\n  const inputRef = useRef<Input>(null);\r\n  const form = useContext(EditableContext)!;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (editing) {\r\n      inputRef.current!.focus();\r\n    }\r\n  }, [editing]);\r\n\r\n  const handleToggleEdit = () => {\r\n    setEditing(!editing);\r\n    form.setFieldsValue({ [dataIndex]: record[dataIndex] });\r\n  };\r\n\r\n  const save = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n\r\n      handleToggleEdit();\r\n      if (metadata) {\r\n        const data = { ...record, ...values };\r\n        dispatch(dataUpdateAction(tablename, convertDataItem(dictionary, data, metadata, 'table')));\r\n      }\r\n    } catch (errInfo) {\r\n      console.log('Save failed:', errInfo);\r\n    }\r\n  };\r\n\r\n  return <TableEditableCell\r\n    title={title}\r\n    editing={editing}\r\n    editable={editable}\r\n    children={children}\r\n    dataIndex={dataIndex}\r\n    record={record}\r\n    handleSave={save}\r\n    handleToggleEdit={handleToggleEdit}\r\n    inputRef={inputRef}\r\n    {...restProps}\r\n  />\r\n};\r\n\r\nexport default DataTableEditableCell;\r\n","import { ReactElement } from 'react';\r\nimport { TData } from '../../types/TData';\r\n\r\nconst TableExpandableRow = (key: keyof TData) => {\r\n  return {\r\n    rowExpandable: (record: TData): boolean => !!record[key],\r\n    expandedRowRender: (record: TData): ReactElement => {\r\n      return <p>{record[key]}</p>\r\n    }\r\n  }\r\n};\r\n\r\nexport default TableExpandableRow;","import { Tooltip } from 'antd';\r\nimport { FilterOutlined } from '@ant-design/icons';\r\n\r\nconst TableFilterIcon = (filtered: boolean) => {\r\n  return (\r\n    <Tooltip placement=\"topLeft\" title=\"Фильтровать\">\r\n      <FilterOutlined style={{ fontSize: '17px', color: filtered ? '#1890ff' : undefined }} />\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nexport default TableFilterIcon;","import React, { useEffect, useState } from 'react';\r\nimport useMetadataSelector from '../../../storages/selectors/metadata';\r\nimport getTableParameters from '../../../utils/getTableParameters';\r\nimport ModalWithForm from '../../UI/ModalWithForm';\r\nimport { IFormItem } from '../../../types/IFormItem';\r\nimport { TData } from '../../../types/TData';\r\nimport { TButton } from '../../../types/TButton';\r\nimport useDictionaryContext from '../../../context/DictionaryContext';\r\nimport { convertDataItem } from '../../../utils/convertDataItem';\r\n\r\ninterface IDataEditModal {\r\n  isOpen: boolean;\r\n  onEditHandler: (data: TData) => void;\r\n  onAddHandler?: (data: TData) => void;\r\n  onClose: () => void;\r\n  formData: TData;\r\n}\r\n\r\nconst DataEditModal: React.FC<IDataEditModal> = ({\r\n  isOpen,\r\n  onEditHandler,\r\n  onAddHandler,\r\n  onClose,\r\n  formData\r\n}) => {\r\n  const { dictionary } = useDictionaryContext();\r\n\r\n  const { data: metadata, isError, isLoading } = useMetadataSelector();\r\n\r\n  const [formItems, setFormItems] = useState<IFormItem[]>([]);\r\n  const [initialValues, setInitialValues] = useState<TData>(formData);\r\n\r\n  useEffect(() => {\r\n    if (formItems && formData && metadata) {\r\n      setInitialValues(convertDataItem(dictionary, formData, metadata, 'modalEdit'));\r\n    }\r\n  }, [formData, formItems, dictionary, metadata]);\r\n\r\n  useEffect(() => {\r\n    if (metadata) {\r\n      setFormItems(metadata\r\n        .filter((m) => m.id !== 'specificParameters')\r\n        .sort((a, b) => a.tableIndex - b.tableIndex)\r\n        .map((m) => {\r\n          return {\r\n            label: m.title,\r\n            name: m.id,\r\n            type: m.type,\r\n            // rules: m.addMenuIndex ? [{ required: true, message: 'Поле должно быть корректно заполнено!' }] : [],\r\n            rules: [],\r\n            disabled: !m.isEditable,\r\n          }\r\n      }));\r\n    }\r\n  }, [ metadata ]);\r\n\r\n  return (\r\n    metadata && !isError && !isLoading ? (\r\n      <ModalWithForm\r\n        title={getTableParameters(metadata).addMenuTitle || 'Добавить'}\r\n        okButtonTitle='Сохранить'\r\n        isOpen={isOpen}\r\n        handleOk={onEditHandler}\r\n        handleClose={onClose}\r\n        formItems={formItems}\r\n        initialValues={initialValues}\r\n        additionalButtons={[\r\n          {\r\n            onClick: onAddHandler,\r\n            title: 'Сохранить как новый'\r\n          } as TButton\r\n        ]}\r\n      />\r\n    ) : null\r\n  );\r\n};\r\n\r\nexport default DataEditModal;\r\n","import { Modal } from 'antd';\r\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\r\n\r\ntype TConfirmModal = ({\r\n  onOk: () => void,\r\n  onCancel: () => void,\r\n  onFinally?: () => void,\r\n  description?: string,\r\n  okText?: string,\r\n});\r\n\r\nconst { confirm  } = Modal;\r\n\r\nconst showConfirmModal = ({ onOk, onCancel, onFinally, description, okText }: TConfirmModal) => {\r\n  const handleOk = () => {\r\n    onOk();\r\n    if (onFinally && typeof onFinally === 'function') onFinally();\r\n  }\r\n\r\n  const handleCancel = () => {\r\n    onCancel();\r\n    if (onFinally && typeof onFinally === 'function') onFinally();\r\n  }\r\n\r\n  confirm({\r\n    title: 'Вы подтверждаете действие ?',\r\n    icon: <ExclamationCircleOutlined />,\r\n    content: description,\r\n    okText: okText || 'Удалить',\r\n    okType: 'danger',\r\n    cancelText: 'Отмена',\r\n    onOk: handleOk,\r\n    onCancel: handleCancel,\r\n  });\r\n}\r\n\r\nexport default showConfirmModal;","import { Modal } from 'antd';\r\nimport {CalendarFilled, BellOutlined, DeleteFilled, EditFilled} from '@ant-design/icons';\r\nimport showConfirmModal from '../Modals/ConfirmModal';\r\nimport TActionBody from \"../../types/TApiActionBody\";\r\nimport { TData } from \"../../types/TData\";\r\nimport { TDropdownMenu } from \"../../types/TDropdownMenu\";\r\nimport { TTableParameters } from \"../../types/TTableParameters\";\r\nimport classes from './ActionMenu.module.scss';\r\nimport { TDictionary } from '../../types/TDictionary';\r\nimport { convertDataItem } from '../../utils/convertDataItem';\r\n\r\ntype TModals = 'editItem' | 'addDiscussion' | 'deleteItem';\r\n\r\ninterface IMenu {\r\n  dataItem: TData;\r\n  metadata: TData[] | null;\r\n  tableParameters: TTableParameters;\r\n  handleOpen: (t: TModals) => void;\r\n  handleEdit: (data: TActionBody) => void;\r\n  handleDelete: (data: TActionBody) => void;\r\n  dictionary: TDictionary;\r\n}\r\n\r\nconst handleDummyClick = () => {\r\n  Modal.info({\r\n    title: 'Информирование',\r\n    content: 'Тестовое уведомление было отправлено'\r\n  })\r\n};\r\n\r\nexport const createActions = ({\r\n    dataItem,\r\n    metadata,\r\n    tableParameters,\r\n    handleOpen,\r\n    handleEdit,\r\n    handleDelete,\r\n    dictionary\r\n  }: IMenu) => {\r\n  const actions: TDropdownMenu[] = [];\r\n\r\n  if (tableParameters.hasDiscussion) {\r\n    const handleOpenAddDiscussion = () => {\r\n      handleOpen('addDiscussion');\r\n    }\r\n\r\n    actions.push({\r\n      type: 'item',\r\n      key: `action-menu-${dataItem.key}-add-discussion`,\r\n      onClick: handleOpenAddDiscussion,\r\n      icon: <CalendarFilled className={classes['action-menu']}/>,\r\n      title: 'Добавить обсуждение',\r\n    });\r\n    actions.push({ type: 'divider', key: 'divider-discussion' });\r\n  }\r\n\r\n  if (tableParameters.hasEditMenu) {\r\n    const handleOpenEditMenu = () => {\r\n      handleOpen('editItem');\r\n    }\r\n\r\n    actions.push({\r\n      type: 'item',\r\n      key: `action-menu-${dataItem.key}-edit`,\r\n      onClick: handleOpenEditMenu,\r\n      icon: <EditFilled className={classes['action-menu']} />,\r\n      title: 'Редактировать',\r\n    });\r\n  }\r\n\r\n  if (tableParameters.hasSetStatusMenu && metadata) {\r\n    actions.push({\r\n      type: 'submenu',\r\n      key: `action-menu-${dataItem.key}-status`,\r\n      title: 'Изменить статус',\r\n      items: Object.entries(dictionary?.status).map(([statusKey, statusInfo]) => {\r\n        const values = convertDataItem(dictionary, dataItem, metadata, 'table');\r\n\r\n        return ({\r\n          key: `action-menu-status-${statusKey}`,\r\n          title: statusInfo.text,\r\n          onClick: () => {\r\n            values.status = statusKey;\r\n            handleEdit(values);\r\n          },\r\n        })\r\n      })\r\n    });\r\n  }\r\n\r\n  if (tableParameters.hasDeleteButton) {\r\n    actions.push({\r\n      type: 'item',\r\n      key: `action-menu-${dataItem.key}-delete`,\r\n      onClick: () => {\r\n        showConfirmModal({\r\n          onOk: () => handleDelete(dataItem),\r\n          onCancel: () => console.log(''),\r\n          description: 'Вы подтверждаете удаление данных ?',\r\n        });\r\n      },\r\n      icon: <DeleteFilled className={classes['action-menu']} />,\r\n      title: 'Удалить',\r\n    });\r\n  }\r\n\r\n  if (tableParameters.hasNotificationButton) {\r\n    actions.push({ type: 'divider', key: 'divider-notification' });\r\n    actions.push({\r\n      type: 'item',\r\n      key: `action-menu-${dataItem.key}-notify`,\r\n      onClick: handleDummyClick,\r\n      icon: <BellOutlined className={classes['action-menu']} />,\r\n      title: 'Отправить уведомление',\r\n    });\r\n  }\r\n\r\n  return actions;\r\n}\r\n","import React from \"react\";\r\nimport { Menu } from 'antd';\r\nimport { TDropdownMenu } from '../../../types/TDropdownMenu';\r\nimport classes from './DropdownMenu.module.scss';\r\nimport './DropdownMenu.css';\r\n\r\nconst DropdownMenu: React.FC<{menuItems: TDropdownMenu[]}> = ({ menuItems }) => {\r\n  return (\r\n    <Menu className={classes['dropdown-menu']}>\r\n      {\r\n        menuItems.map((menuItem, index) => (\r\n          menuItem.type === 'divider' ? (\r\n            <Menu.Divider key={`divider-${index}`}/>\r\n          ) : (\r\n            menuItem.type === 'submenu' ? (\r\n              <Menu.SubMenu\r\n                key={menuItem.key}\r\n                title={menuItem.title}\r\n              >\r\n                {\r\n                  menuItem.items && menuItem.items.map((subMenuItem) => (\r\n                    <Menu.Item\r\n                      key={subMenuItem.key}\r\n                      onClick={subMenuItem.onClick}\r\n                      icon={subMenuItem.icon}\r\n                    >\r\n                      {subMenuItem.title}\r\n                    </Menu.Item>\r\n                  ))\r\n                }\r\n              </Menu.SubMenu>\r\n            ) : (\r\n              <Menu.Item\r\n                key={menuItem.key}\r\n                onClick={menuItem.onClick}\r\n                icon={menuItem.icon}\r\n              >\r\n                {menuItem.title}\r\n              </Menu.Item>\r\n            ))\r\n          )\r\n        )\r\n      }\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default DropdownMenu;\r\n","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Dropdown, Tooltip } from 'antd';\r\nimport DataEditModal from '../Modals/DataEditModal';\r\nimport { TData } from '../../types/TData';\r\nimport { TTableParameters } from '../../types/TTableParameters';\r\nimport TActionBody from '../../types/TApiActionBody';\r\nimport { dataAddAction, dataDeleteAction, dataUpdateAction } from '../../storages/actions/data';\r\nimport { createActions } from './createActions';\r\nimport DropdownMenu from '../UI/DropdownMenu';\r\nimport useDictionaryContext from '../../context/DictionaryContext';\r\nimport useMetadataSelector from '../../storages/selectors/metadata';\r\nimport DataAddModal from '../Modals/DataAddModal';\r\n\r\ntype TModals = 'editItem' | 'addDiscussion' | 'deleteItem';\r\n\r\ntype TActionMenu = {\r\n  title: string,\r\n  dataItem: TData,\r\n  tableParameters: TTableParameters,\r\n  tablename: string,\r\n};\r\n\r\nconst ActionMenu: React.FC<TActionMenu> = ({dataItem, title, tableParameters, tablename}) => {\r\n  const { dictionary } = useDictionaryContext();\r\n\r\n  const [openModal, setOpenModal] = useState<TModals>();\r\n\r\n  const { data: metadata } = useMetadataSelector();\r\n\r\n  const handleClose = () => setOpenModal(undefined);\r\n  const handleOpen = (t: TModals) => {\r\n    setOpenModal(t);\r\n  }\r\n\r\n  const handleEdit = (data: TActionBody) => dispatch(dataUpdateAction(tablename, data));\r\n  const handleDelete = (data: TActionBody) => dispatch(dataDeleteAction(tablename, data));\r\n  const handleAdd = (data: TActionBody) => {\r\n    delete data.id;\r\n    dispatch(dataAddAction(tablename, data));\r\n  }\r\n\r\n  const handleAddDiscussion = (data: TActionBody) => {\r\n    dispatch(dataAddAction('discussion', data));\r\n  }\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const actions = createActions({\r\n    dataItem,\r\n    dictionary,\r\n    metadata,\r\n    tableParameters,\r\n    handleOpen,\r\n    handleDelete,\r\n    handleEdit\r\n  });\r\n\r\n  return (\r\n    actions.length ? (\r\n      <>\r\n        <DataEditModal\r\n          isOpen={openModal === 'editItem'}\r\n          onEditHandler={handleEdit}\r\n          onAddHandler={handleAdd}\r\n\r\n          onClose={handleClose}\r\n          formData={dataItem}\r\n        />\r\n\r\n        <DataAddModal\r\n          isOpen={openModal === 'addDiscussion'}\r\n          onAddHandler={handleAddDiscussion}\r\n          onClose={handleClose}\r\n          modalTablename='discussion'\r\n          modalInitialValues={{\r\n            theme: dataItem.text,\r\n            mainQuestions: dataItem.description\r\n          }}\r\n        />\r\n\r\n        <Tooltip placement='topRight' title={title}>\r\n          <Dropdown.Button\r\n            overlay={<DropdownMenu menuItems={actions} />}\r\n            trigger={['click']}\r\n          />\r\n        </Tooltip>\r\n      </>\r\n    ) : null\r\n  );\r\n};\r\n\r\nexport default ActionMenu;\r\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { ConfigProvider, Pagination, Table, Tag } from 'antd';\r\nimport { invert } from 'lodash';\r\nimport { SortOrder } from 'antd/lib/table/interface';\r\nimport ruRU from 'antd/lib/locale/ru_RU';\r\nimport TableEditableRow from '../TableEditableRow';\r\nimport DataTableEditableCell from '../../TableEditableCell';\r\nimport TableExpandableRow from '../TableExpandableRow';\r\nimport TableFilterIcon from '../TableFilterIcon';\r\nimport ActionMenu from '../../ActionMenu';\r\nimport { TData } from '../../../types/TData';\r\nimport { TDictionary } from '../../../types/TDictionary';\r\nimport { TTableParameters } from '../../../types/TTableParameters';\r\nimport { usePrintPDFContext } from '../../../context/PrintPDFContext';\r\nimport { useFilterDrawer } from '../FilterPanel';\r\nimport { useColumnsDrawer } from '../ColumnsPanel';\r\nimport classes from './Table.module.scss';\r\nimport './Table.css';\r\n\r\ntype TTableProps = {\r\n  data: TData[],\r\n  columns: TData[],\r\n  tableParameters: TTableParameters,\r\n  tablename: string,\r\n  dictionary: TDictionary\r\n};\r\n\r\nconst PAGE_SIZE = 10;\r\n\r\nconst DataTable: React.FC<TTableProps> = ({ data, columns, tableParameters, tablename, dictionary }) => {\r\n  const { setDataPrintRef, setDataPrintMode, dataPrintMode } = usePrintPDFContext();\r\n  const dataRef = useRef<HTMLDivElement>(null)\r\n  const [page, setPage] = useState<number>(1);\r\n  const [pageSize, setPageSize] = useState<number>(PAGE_SIZE);\r\n\r\n  const hasActionMenu = tableParameters.hasActionMenu;\r\n\r\n  useEffect(() => {\r\n    if (dataRef) setDataPrintRef(dataRef)\r\n  }, [setDataPrintRef]);\r\n\r\n  const sourceData = useMemo(() => {\r\n    return data.map((dataItem, index) => {\r\n      return {\r\n        ...dataItem,\r\n        key: `table-row-${dataItem.id}-${index}`,\r\n        action: hasActionMenu\r\n        ? <ActionMenu\r\n            key={`action-menu-${dataItem.id}-${index}`}\r\n            title='Меню действий'\r\n            dataItem={dataItem}\r\n            tableParameters={tableParameters}\r\n            tablename={tablename}\r\n          />\r\n        : null\r\n      }\r\n    })\r\n  }, [data, tableParameters, hasActionMenu, tablename])\r\n\r\n  const getDefaultSorter = (field: string) => {\r\n    if (Array.isArray(tableParameters.defaultSortField)) {\r\n      const index = tableParameters.defaultSortField.indexOf(field);\r\n\r\n      return index < 0\r\n        ? undefined\r\n        : (tableParameters.defaultSortDirection as string[])[index];\r\n    }\r\n    return field === tableParameters.defaultSortField\r\n      ? tableParameters.defaultSortDirection\r\n      : undefined;\r\n  }\r\n\r\n  const {\r\n    ColumnsPanelButtons,\r\n    ColumnsPanel,\r\n    columnsData\r\n  } = useColumnsDrawer(columns);\r\n\r\n  const tableColumns: TData[] = columnsData\r\n    .map((column) => {\r\n      let invertDictionary: Record<string, string> = {};\r\n      if (dictionary[column.dataIndex]) {\r\n        invertDictionary = invert(\r\n          Object.fromEntries(Object.entries(dictionary[column.dataIndex]).map(([key, info]) => [key, info.text]))\r\n        );\r\n      }\r\n\r\n      return !column.isInlineEditable\r\n        ? {\r\n            ...column,\r\n            defaultSortOrder: (getDefaultSorter(column.dataIndex)) as SortOrder,\r\n            sortOrder: (getDefaultSorter(column.dataIndex)) as SortOrder,\r\n            filterIcon: TableFilterIcon,\r\n            render: (text: string, record: TData) => {\r\n              return column.isTagged\r\n                ? <Tag color={dictionary[column.dataIndex][invertDictionary[record[column.dataIndex]]]?.tag}>{text}</Tag>\r\n                : text\r\n            }\r\n          }\r\n          : {\r\n            ...column,\r\n            defaultSortOrder: (getDefaultSorter(column.dataIndex)) as SortOrder,\r\n            sortOrder: (getDefaultSorter(column.dataIndex)) as SortOrder,\r\n            filterIcon: TableFilterIcon,\r\n            onCell: (record: any) => ({\r\n              record,\r\n              editable: column.isInlineEditable,\r\n              dataIndex: column.dataIndex,\r\n              title: column.title,\r\n            }),\r\n          }\r\n      }\r\n    )\r\n\r\n  if (hasActionMenu) tableColumns.push({\r\n    dataIndex: 'action',\r\n    key: 'action',\r\n    isInlineEditable: false,\r\n    showInTable: true,\r\n    type: 'action',\r\n    className: 'table-action-column',\r\n  })\r\n\r\n  tableColumns.forEach((tableColumn) => {\r\n    if (tableColumn.dataIndex !== 'action') {\r\n      tableColumn.className = classes[`table-title-row-${Math.ceil(((tableColumn.title?.length ?? 1)*7 + 48)/10)*10}`];\r\n    }\r\n  })\r\n\r\n  const {\r\n    FilterButtons,\r\n    FilterPanel,\r\n    filterData\r\n  } = useFilterDrawer(columnsData, sourceData);\r\n\r\n  const handleChangePage = useCallback((nextPage: number, pageSize: number) => {\r\n    setPage(nextPage);\r\n    setPageSize(pageSize);\r\n  }, [])\r\n\r\n  const TableTitle = useCallback(() => (\r\n    <div className={classes['table-title']}>\r\n      <div>\r\n        {FilterButtons}\r\n\r\n        {ColumnsPanelButtons}\r\n      </div>\r\n\r\n      <Pagination\r\n        showSizeChanger\r\n        current={page}\r\n        pageSize={pageSize}\r\n        onChange={handleChangePage}\r\n        total={(filterData || []).length}\r\n      />\r\n    </div>\r\n  ), [\r\n    FilterButtons,\r\n    ColumnsPanelButtons,\r\n    filterData,\r\n    page,\r\n    pageSize,\r\n    handleChangePage\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (dataPrintMode === 'all') {\r\n      setPageSize(0);\r\n      setDataPrintMode('print');\r\n    } else if (dataPrintMode === 'current') {\r\n    } else {\r\n      setPageSize(PAGE_SIZE);\r\n    }\r\n  }, [filterData, pageSize, dataPrintMode, setDataPrintMode])\r\n\r\n  return (\r\n    // <>\r\n    <ConfigProvider locale={ruRU}>\r\n      {FilterPanel}\r\n\r\n      {ColumnsPanel}\r\n\r\n      <Table\r\n        ref={dataRef}\r\n        dataSource={ filterData }\r\n        columns={ tableColumns }\r\n        title={TableTitle}\r\n        // scroll={{x: 'max-content'}}\r\n        tableLayout='auto'\r\n        components={{\r\n          body: {\r\n            row: TableEditableRow,\r\n            cell: DataTableEditableCell\r\n          },\r\n        }}\r\n        rowClassName={() => 'editable-row'}\r\n        bordered={ false }\r\n        loading={ false }\r\n        size='large'\r\n        expandable={ TableExpandableRow('description') }\r\n        // expandIcon\r\n        sticky={ true }\r\n        pagination={{\r\n          position: ['topRight'],\r\n          pageSize: pageSize,\r\n          current: page,\r\n          total: filterData.length,\r\n          className: classes['hidden-pagination']\r\n        }}\r\n        className={ classes.table }\r\n      />\r\n    </ConfigProvider>\r\n    // </>\r\n  );\r\n}\r\n\r\nexport default DataTable;\r\n","import { useCallback, useEffect, useMemo, useState } from \"react\"\r\nimport { Button, Drawer, Tooltip, Form, Checkbox } from \"antd\";\r\nimport { OrderedListOutlined } from '@ant-design/icons';\r\nimport { TData } from \"../../../types/TData\";\r\nimport { IFormItem } from \"../../../types/IFormItem\";\r\nimport classes from './ColumnsPanel.module.scss';\r\n\r\nexport const useColumnsDrawer = (metadata: TData[], initialVisible: boolean = false) => {\r\n  const [columnsData, setColumnsData] = useState<TData[]>([]);\r\n  const [visible, setVisible] = useState<boolean>(initialVisible);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (metadata) setColumnsData(metadata)\r\n  }, [metadata]);\r\n\r\n  const openPanel = useCallback(() => setVisible(true), []);\r\n  const closePanel = useCallback(() => setVisible(false), []);\r\n\r\n  const resetColumns = useCallback(() => {\r\n    setColumnsData(metadata);\r\n    form.setFields(metadata.map(({dataIndex, showInTable}) => ({\r\n      name: dataIndex,\r\n      value: showInTable,\r\n    })));\r\n  }, [form, metadata]);\r\n\r\n  const handleSubmit = useCallback((values: any) => {\r\n    setColumnsData((prev) => {\r\n      return prev.map((columnData) => {\r\n        return {\r\n          ...columnData,\r\n          showInTable: values[columnData.dataIndex] ?? false\r\n        }\r\n      })\r\n    });\r\n    closePanel();\r\n  }, [closePanel]);\r\n\r\n  const ColumnsPanelButtons = useMemo<JSX.Element>(() => (\r\n    <Tooltip\r\n      placement='topRight'\r\n      title='Выбрать колонки'\r\n    >\r\n      <Button\r\n        onClick={openPanel}\r\n        className={classes['select-columns-button']}\r\n        icon={<OrderedListOutlined style={{ fontSize: '20px' }}/>}\r\n      />\r\n    </Tooltip>\r\n  ), [openPanel]);\r\n\r\n  const ColumnsPanel = useMemo(() => (\r\n    <Drawer\r\n      title='Колонки'\r\n      placement=\"right\"\r\n      onClose={closePanel}\r\n      visible={visible}\r\n      width={250}\r\n    >\r\n      <Form\r\n        name='basic'\r\n        preserve={false}\r\n        labelCol={{ span: 20 }}\r\n        wrapperCol={{ span: 4 }}\r\n        onFinish={handleSubmit}\r\n        onFinishFailed={console.log}\r\n        form={form}\r\n      >\r\n        <Form.Item wrapperCol={{ span: 24 }}>\r\n          <Button onClick={resetColumns} style={{width: '100%'}}>По умолчанию</Button>\r\n        </Form.Item>\r\n\r\n        {\r\n          columnsData\r\n            .map((columnData: TData) => {\r\n              const formItem: IFormItem = {\r\n                name: columnData.dataIndex,\r\n                label: columnData.title,\r\n                type: columnData.type,\r\n                disabled: false,\r\n              }\r\n\r\n              return (\r\n                <Form.Item\r\n                  key={formItem.name}\r\n                  label={formItem.label}\r\n                  name={formItem.name}\r\n                  valuePropName=\"checked\"\r\n                  initialValue={columnData.showInTable}\r\n                  style={{marginBottom: '12px'}}\r\n                >\r\n                  <Checkbox value={true}/>\r\n                </Form.Item>\r\n              );\r\n            })\r\n        }\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{marginTop: '30px'}}>\r\n          <Button type=\"primary\" htmlType=\"submit\" style={{width: '100%'}}>Применить</Button>\r\n        </Form.Item>\r\n\r\n      </Form>\r\n    </Drawer>\r\n  ), [\r\n    form,\r\n    columnsData,\r\n    visible,\r\n    closePanel,\r\n    resetColumns,\r\n    handleSubmit,\r\n  ]);\r\n\r\n  const data = useMemo(() => (columnsData ?? []).filter((d) => d.showInTable), [columnsData]);\r\n\r\n  return {\r\n    ColumnsPanelButtons,\r\n    ColumnsPanel,\r\n    columnsData: data\r\n  };\r\n}\r\n","import { useCallback, useMemo, useState } from \"react\"\r\nimport {\r\n  Button,\r\n  Drawer,\r\n  Tooltip,\r\n  Form,\r\n  Input,\r\n  Select,\r\n  DatePicker,\r\n  TimePicker,\r\n  Col,\r\n  Row,\r\n  Checkbox\r\n} from \"antd\";\r\nimport { FilterOutlined, FilterFilled } from '@ant-design/icons';\r\nimport { TData } from \"../../../types/TData\";\r\nimport { IFormItem } from \"../../../types/IFormItem\";\r\nimport useDictionaryContext from \"../../../context/DictionaryContext\";\r\nimport classes from './FilterPanel.module.scss';\r\n\r\nexport const useFilterDrawer = (tableColumns: TData[], sourceData: TData[], initialVisible = false) => {\r\n  const { dictionary } = useDictionaryContext();\r\n\r\n  const [visibleResetButton, setVisibleResetButton] = useState<boolean>(false);\r\n  const [filterData, setFilterData] = useState<TData[]>();\r\n  const [visible, setVisible] = useState<boolean>(initialVisible);\r\n  const [form] = Form.useForm();\r\n\r\n  const openPanel = useCallback((e: any) => {\r\n    setVisible(true);\r\n  }, []);\r\n\r\n  const closePanel = useCallback(() => {\r\n    setVisible(false);\r\n  }, []);\r\n\r\n  const data = useMemo(() => filterData ?? sourceData, [filterData, sourceData]);\r\n\r\n  const handleReset = useCallback(() => {\r\n    setFilterData(sourceData);\r\n    setVisibleResetButton(false);\r\n    form.resetFields();\r\n  }, [sourceData, form]);\r\n\r\n  const handleSubmit = useCallback((values: any) => {\r\n    setVisibleResetButton(false);\r\n    setFilterData(sourceData\r\n      .filter((data: TData) => {\r\n        return Object.keys(data).reduce((acc, key) => {\r\n          let value = dictionary && dictionary[key] ? dictionary[key][values[key]].text : values[key];\r\n          if (typeof data[key] === 'number') value = +value;\r\n          if (typeof data[key] === 'boolean') value = !!value;\r\n          if (value) setVisibleResetButton(true);\r\n          return acc\r\n            && (\r\n                (typeof data[key] === 'boolean' && data[key] === value) ||\r\n                (!value && typeof data[key] !== 'boolean') ||\r\n                (value && data[key] && data[key] === value)\r\n              )\r\n        }, true)\r\n      })\r\n    )\r\n    closePanel();\r\n  }, [dictionary, sourceData, closePanel]);\r\n\r\n  const FilterButtons = useMemo<JSX.Element>(() => (\r\n    <div>\r\n      <Tooltip\r\n        placement='topRight'\r\n        title='Показать фильтры'\r\n      >\r\n        <Button\r\n          onClick={openPanel}\r\n          className={classes['filter-button']}\r\n        >\r\n          {\r\n            visibleResetButton ?\r\n            <FilterFilled style={{ fontSize: '20px' }}/> :\r\n            <FilterOutlined style={{ fontSize: '20px' }}/>\r\n          }\r\n        </Button>\r\n      </Tooltip>\r\n      <Button\r\n        onClick={handleReset}\r\n        className={classes['reset-filter-button']}\r\n        style={{display: visibleResetButton ? 'inline' : 'none'}}\r\n      >\r\n        Сбросить фильтры\r\n      </Button>\r\n    </div>\r\n  ), [openPanel, handleReset, visibleResetButton]);\r\n\r\n  const FilterPanel = useMemo(() => (\r\n    <Drawer\r\n      title='Фильтры'\r\n      placement=\"right\"\r\n      onClose={closePanel}\r\n      visible={visible}\r\n      width={430}\r\n    >\r\n      <Form\r\n        name='basic'\r\n        preserve={false}\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 16 }}\r\n        // initialValues={initialValues ? initialValues : {}}\r\n        onFinish={handleSubmit}\r\n        form={form}\r\n      >\r\n        {\r\n          tableColumns\r\n            .filter((tableColumn) => tableColumn.isFilter)\r\n            .map((tableColumn: TData) => {\r\n              const formItem: IFormItem = {\r\n                name: tableColumn.dataIndex,\r\n                label: tableColumn.title,\r\n                type: tableColumn.type,\r\n                disabled: false\r\n              }\r\n\r\n              return (\r\n                <Form.Item\r\n                  key={formItem.name}\r\n                  label={formItem.label}\r\n                  name={formItem.name}\r\n                  valuePropName={formItem.type === 'checkbox' ? 'checked' : 'value'}\r\n                >\r\n                  {\r\n                    (['string', 'number'].includes(formItem.type)) ?\r\n                      <Input /> :\r\n                    formItem.type === 'fulltext' ?\r\n                      <Input.TextArea /> :\r\n                    formItem.type === 'checkbox' ?\r\n                      <Checkbox value={true} /> :\r\n                    (['select', 'multi-select'].includes(formItem.type)) && dictionary[formItem.name] ? (\r\n                      <Select\r\n                        allowClear\r\n                        filterOption={(value: string, option) => RegExp(value, 'i').test(`${option?.label}`)}\r\n                        mode={formItem.type === 'multi-select' ? 'multiple' : undefined}\r\n                        showSearch\r\n                        options={Object.entries(dictionary[formItem.name]).map(([value, info]) => (\r\n                          { value, label: info.text }\r\n                        ))}\r\n                      />\r\n                    ) :\r\n                    formItem.type === 'date' ?\r\n                      <DatePicker format=\"YYYY-MM-DD\" /> :\r\n                    formItem.type === 'datetime' ?\r\n                      <DatePicker format=\"YYYY-MM-DD HH:mm:ss\" showTime /> :\r\n                    formItem.type === 'time' ?\r\n                      <TimePicker format=\"HH:mm:ss\" /> :\r\n                    null\r\n                  }\r\n                </Form.Item>\r\n              );\r\n            })\r\n        }\r\n\r\n        <Form.Item wrapperCol={{ span: 24 }} style={{marginTop: '50px'}}>\r\n          <Row>\r\n            <Col span={12}>\r\n              <Button onClick={handleReset}>Сбросить</Button>\r\n            </Col>\r\n            <Col span={12} style={{textAlign: 'right'}}>\r\n              <Button type=\"primary\" htmlType=\"submit\">Применить</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form.Item>\r\n      </Form>\r\n    </Drawer>\r\n  ), [\r\n    form,\r\n    dictionary,\r\n    tableColumns,\r\n    visible,\r\n    closePanel,\r\n    handleReset,\r\n    handleSubmit,\r\n  ]);\r\n\r\n  return {\r\n    FilterButtons,\r\n    FilterPanel,\r\n    filterData: data\r\n  };\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Typography } from 'antd';\r\nimport mapMetadataToColumns from '../../utils/mapMetadataToColumns';\r\nimport getTableParameters from '../../utils/getTableParameters';\r\nimport useGetTablename from '../../utils/hooks/useGetTablename';\r\nimport Table from '../UI/Table';\r\nimport LoadingComponent from '../UI/LoadingComponent';\r\nimport { TTableParameters } from '../../types/TTableParameters';\r\nimport { useGetDataMeta } from '../../utils/hooks/useGetDataMeta';\r\nimport classes from './DataTable.module.scss';\r\nimport useDictionaryContext from '../../context/DictionaryContext';\r\n\r\nconst { Title } = Typography;\r\n\r\nconst DataTable: React.FC = () => {\r\n  const [tableParameters, setTableParameters] = useState<TTableParameters | null>(null);\r\n\r\n  const tablename = useGetTablename();\r\n  const { dictionary } = useDictionaryContext();\r\n\r\n  const {\r\n    data: sourceData, isErrorData, isLoadingData,\r\n    metadata, isErrorMetadata, isLoadingMetadata\r\n  } = useGetDataMeta(tablename);\r\n\r\n  useEffect(() => {\r\n    if (metadata) {\r\n      setTableParameters(getTableParameters(metadata));\r\n    }\r\n  }, [metadata]);\r\n\r\n  return (\r\n    isLoadingData || isLoadingMetadata ? (\r\n      <div className={classes.center}>\r\n        <LoadingComponent />\r\n      </div>\r\n    ) : (\r\n      (isErrorData || isErrorMetadata) && !sourceData ? (\r\n        <div className={classes.center}>\r\n          <Title level={3}>Ошибка получения данных</Title>\r\n        </div>\r\n      ) : (\r\n        sourceData && metadata && tableParameters &&\r\n          <Table\r\n            data={sourceData}\r\n            columns={mapMetadataToColumns(metadata)}\r\n            tableParameters={tableParameters}\r\n            tablename={tablename}\r\n            dictionary={dictionary}\r\n          />\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\nexport default DataTable\r\n"],"sourceRoot":""}