{"version":3,"sources":["utils/sortData.ts","utils/hooks/useGetDataMeta.tsx","components/DataCalendar/DataCalendar.module.scss","components/UI/Calendar/index.tsx","components/DataCalendar/index.tsx"],"names":["sortData","key","direction","type","a","b","valueA","valueB","useGetDataMeta","tablename","useState","data","setData","useDictionaryContext","dictionary","setDictionary","useDataSelector","sourceData","isErrorData","isError","isLoadingData","isLoading","useMetadataSelector","metadata","isErrorMetadata","isLoadingMetadata","dispatch","useDispatch","mapDictionaryCb","useCallback","value","metadataProperty","find","property","id","split","map","v","text","join","includes","useEffect","dataGetAction","metadataGetAction","filter","forEach","validValues","Object","keys","length","d","mapValues","module","exports","calendarModes","today","month","week","day","list","Calendar","dates","handleDayClick","handleEventClick","initialView","test","document","location","pathname","events","eventTimeFormat","hour","minute","plugins","dayGridPlugin","timeGridPlugin","listPlugin","interactionPlugin","dateClick","eventClick","locale","selectable","weekNumberCalculation","weekends","slotMinTime","headerToolbar","left","center","right","buttonText","moment","DataCalendar","mode","setDates","date","Date","time","getDayEventsInfo","dayEvents","event","format","DATE_FORMAT_DATE","dateStr","sort","title","DATE_FORMAT_TIME","description","result","dataSource","renderItem","item","Item","Meta","avatar","BulbOutlined","getDetailedEventInfo","eventInfo","start","toISOString","className","classes","responsible","participants","DATE_FORMAT_FULLDATE","LoadingComponent","Modal","info","content","width","Title","level"],"mappings":"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","file":"static/js/7.063248c9.chunk.js","sourcesContent":["import { TData } from \"../types/TData\";\r\nimport { TDataTypes } from \"../types/TDataTypes\";\r\n\r\nconst sortData =\r\n  (key: string, direction: \"ascend\" | \"descend\" = \"ascend\", type?: TDataTypes) =>\r\n  (a: TData, b: TData) =>\r\n  {\r\n    const valueA = type && type === 'number' ? +a[key] : a[key];\r\n    const valueB = type && type === 'number' ? +b[key] : b[key];\r\n\r\n    if (valueA < valueB) return direction === \"ascend\" ? -1 : 1;\r\n    if (valueA > valueB) return direction === \"ascend\" ? 1 : -1;\r\n    return 0;\r\n  }\r\n\r\nexport default sortData;\r\n","import { useCallback, useEffect, useState } from \"react\";\r\nimport { mapValues } from \"lodash\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport useDataSelector from \"../../storages/selectors/data\";\r\nimport useMetadataSelector from \"../../storages/selectors/metadata\";\r\nimport { dataGetAction } from \"../../storages/actions/data\";\r\nimport metadataGetAction from \"../../storages/actions/metadata\";\r\nimport useDictionaryContext from \"../../context/DictionaryContext\";\r\nimport { TData } from \"../../types/TData\";\r\n\r\nexport const useGetDataMeta = (tablename: string) => {\r\n  const [ data, setData ] = useState<TData[]>([]);\r\n  const { dictionary, setDictionary } = useDictionaryContext();\r\n\r\n  const { data: sourceData, isError: isErrorData, isLoading: isLoadingData } = useDataSelector();\r\n  const { data: metadata, isError: isErrorMetadata, isLoading: isLoadingMetadata } = useMetadataSelector();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const mapDictionaryCb = useCallback((value: string, key: string) => {\r\n    const metadataProperty = metadata?.find((property) => property.id === key);\r\n    if (metadataProperty && metadataProperty.type === 'multi-select' && dictionary[key]){\r\n      return value.split(',').map((v) => dictionary[key][v].text).join(', ')\r\n    } else if (metadataProperty && ['select', 'checkbox'].includes(metadataProperty.type)  && dictionary[key] && dictionary[key][value]) {\r\n      return dictionary[key][value].text\r\n    }\r\n    return value;\r\n  }, [metadata, dictionary])\r\n\r\n  useEffect(() => {\r\n    dispatch(dataGetAction(tablename));\r\n    dispatch(metadataGetAction(tablename));\r\n  }, [tablename, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (metadata) {\r\n      metadata\r\n        .filter((property) => ['select', 'multi-select', 'checkbox'].includes(property.type))\r\n        .forEach((property) => setDictionary(property.id, property.validValues))\r\n    }\r\n  }, [metadata, setDictionary]);\r\n\r\n  useEffect(() => {\r\n    if (sourceData && metadata && Object.keys(dictionary).length) {\r\n      setData(() => sourceData.map((d) => mapValues(d, mapDictionaryCb)));\r\n    }\r\n  }, [sourceData, metadata, dictionary, mapDictionaryCb]);\r\n\r\n  return {\r\n    data, isErrorData, isLoadingData,\r\n    metadata, isErrorMetadata, isLoadingMetadata\r\n  }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"detailed-event-info-row\":\"DataCalendar_detailed-event-info-row__3iXF4\",\"detailed-event-info-headcol\":\"DataCalendar_detailed-event-info-headcol__1kx2O\",\"detailed-event-info-col\":\"DataCalendar_detailed-event-info-col__eI6lM\"};","import FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport listPlugin from '@fullcalendar/list';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport './Calendar.css';\r\n\r\nconst calendarModes = { today: 'Сегодня', month: 'Месяц', week: 'Неделя', day: 'День', list: 'Список' };\r\n\r\ninterface ICalendar {\r\n  dates: any[],\r\n  handleDayClick: (event: any) => void,\r\n  handleEventClick: (event: any) => void\r\n};\r\n\r\nexport const Calendar: React.FC<ICalendar> = ({dates, handleDayClick, handleEventClick}) => {\r\n  let initialView = 'dayGridMonth';\r\n  if (/\\/calendar\\/list/.test(document.location.pathname)) {\r\n    initialView = 'listWeek';\r\n  }\r\n\r\n  return (\r\n    <FullCalendar\r\n      events={dates}\r\n      eventTimeFormat={{ hour: '2-digit', minute: '2-digit' }}\r\n      plugins={[dayGridPlugin, timeGridPlugin, listPlugin, interactionPlugin]}\r\n      initialView={initialView}\r\n      dateClick={handleDayClick}\r\n      eventClick={handleEventClick}\r\n      locale=\"ru\"\r\n      selectable\r\n      weekNumberCalculation=\"ISO\"\r\n      weekends={false}\r\n      slotMinTime=\"08:00:00\"\r\n      headerToolbar={{\r\n        left: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek',\r\n        center: 'title',\r\n        right: 'today prev,next',\r\n      }}\r\n      buttonText={calendarModes}\r\n    />\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ru';\r\nimport { Col, List, Modal, Row, Typography } from 'antd';\r\nimport { BulbOutlined } from '@ant-design/icons';\r\nimport { Calendar } from '../UI/Calendar';\r\nimport LoadingComponent from '../UI/LoadingComponent';\r\nimport { useGetDataMeta } from '../../utils/hooks/useGetDataMeta';\r\nimport sortData from '../../utils/sortData';\r\nimport { TData } from '../../types/TData';\r\nimport { DATE_FORMAT_DATE, DATE_FORMAT_FULLDATE, DATE_FORMAT_TIME } from '../../constants/constants';\r\nimport classes from './DataCalendar.module.scss';\r\n\r\nmoment.locale('ru');\r\n\r\ninterface IDataCalendar {\r\n  mode: string,\r\n}\r\n\r\nconst DataCalendar: React.FC<IDataCalendar> = ({ mode }) => {\r\n  const [dates, setDates] = useState<TData[]>([]);\r\n  const {\r\n    data, isErrorData, isLoadingData,\r\n    isLoadingMetadata, isErrorMetadata\r\n  } = useGetDataMeta(mode);\r\n\r\n  useEffect(() => {\r\n    if (data && data.length) {\r\n      setDates(data.map((d) => ({\r\n        ...d,\r\n        date: new Date(`${d.date} ${d.time}`),\r\n      })))\r\n    }\r\n  }, [data]);\r\n\r\n  const getDayEventsInfo = (date: any) => {\r\n    const dayEvents = dates\r\n      .filter((event) => moment(event.date).format(DATE_FORMAT_DATE) === date.dateStr)\r\n      .sort(sortData('time', 'ascend'))\r\n      .map((event) => ({\r\n        title: moment(event.date).format(DATE_FORMAT_TIME),\r\n        description: event.result,\r\n      }))\r\n\r\n    return (\r\n      dayEvents.length ? (\r\n        <List\r\n          dataSource={dayEvents}\r\n          renderItem={(item) => (\r\n            <List.Item>\r\n              <List.Item.Meta\r\n                avatar={<BulbOutlined />}\r\n                title={item.title}\r\n                description={item.description}\r\n              />\r\n            </List.Item>\r\n          )}\r\n        />\r\n      ) : 'Нет назначенных совещаний'\r\n    );\r\n  };\r\n\r\n  const handleDayClick = (day: any) => {\r\n    Modal.info({\r\n      title: 'Совещания за день',\r\n      content: getDayEventsInfo(day)\r\n    });\r\n  };\r\n\r\n  const getDetailedEventInfo = (event: any) => {\r\n    const eventInfo = dates.find(\r\n      (d) =>\r\n        moment(event.event.start).toISOString() === moment(d.date).toISOString() &&\r\n        d.title === event.event.title\r\n    );\r\n\r\n    return (\r\n      eventInfo ? (\r\n        <>\r\n          <Row className={classes['detailed-event-info-row']}>\r\n            <Col className={classes['detailed-event-info-headcol']}>Тема</Col>\r\n            <Col className={classes['detailed-event-info-col']}>{eventInfo.title}</Col>\r\n          </Row>\r\n          <Row className={classes['detailed-event-info-row']}>\r\n            <Col className={classes['detailed-event-info-headcol']}>Ответственный</Col>\r\n            <Col className={classes['detailed-event-info-col']}>{eventInfo.responsible}</Col>\r\n          </Row>\r\n          <Row className={classes['detailed-event-info-row']}>\r\n            <Col className={classes['detailed-event-info-headcol']}>Участники</Col>\r\n            <Col className={classes['detailed-event-info-col']}>{eventInfo.participants}</Col>\r\n          </Row>\r\n          <Row className={classes['detailed-event-info-row']}>\r\n            <Col className={classes['detailed-event-info-headcol']}>Дата</Col>\r\n            <Col className={classes['detailed-event-info-col']}>\r\n              {moment(eventInfo.date).format(DATE_FORMAT_FULLDATE)}\r\n            </Col>\r\n          </Row>\r\n          <Row className={classes['detailed-event-info-row']}>\r\n            <Col className={classes['detailed-event-info-headcol']}>Время</Col>\r\n            <Col className={classes['detailed-event-info-col']}>\r\n              {moment(eventInfo.date).format(DATE_FORMAT_TIME)}\r\n            </Col>\r\n          </Row>\r\n        </>\r\n      ) : 'Нет назначенных совещаний'\r\n    )\r\n  };\r\n\r\n  const handleEventClick = (event: any) => {\r\n    Modal.info({\r\n      title: 'Совещаниe',\r\n      content: getDetailedEventInfo(event),\r\n      width: '600px'\r\n    });\r\n  };\r\n\r\n  return (\r\n    isLoadingData || isLoadingMetadata ? (\r\n      <div className={classes.center}>\r\n        <LoadingComponent />\r\n      </div>\r\n    ) : (\r\n      (isErrorData || isErrorMetadata) && !dates ? (\r\n        <div className={classes.center}>\r\n          <Typography.Title level={3}>Ошибка получения данных</Typography.Title>\r\n        </div>\r\n      ) : (\r\n        dates &&\r\n          <Calendar\r\n            dates={dates}\r\n            handleEventClick={handleEventClick}\r\n            handleDayClick={handleDayClick}\r\n          />\r\n      )\r\n    )\r\n  )\r\n}\r\n\r\nexport default DataCalendar;\r\n"],"sourceRoot":""}