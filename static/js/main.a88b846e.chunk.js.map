{"version":3,"sources":["context/PrintPDFContext.tsx","storages/middleware/apiMiddleware.ts","storages/selectors/metadata.ts","storages/actions/data.ts","utils/getTableParameters.ts","storages/actions/metadata.ts","storages/selectors/data.ts","components/UI/LoadingComponent/index.tsx","components/UI/ModalWithForm/index.tsx","utils/hooks/useGetMetaDictionary.ts","components/Modals/DataAddModal/index.tsx","components/UI/LoadingComponent/LoadingComponent.module.scss","components/Content/Content.module.scss","App.module.scss","constants/constants.ts","context/UserContext.tsx","utils/showNotification.ts","storages/reducers/metadata.ts","utils/crudReduxUpdater.ts","storages/reducers/data.ts","storages/reducers/index.ts","storages/storage.tsx","components/Header/index.tsx","components/UI/PrintPDF/index.tsx","components/UI/ModalWithSelect/index.tsx","components/Sidebar/index.tsx","components/UI/SuspenseFallback/index.tsx","components/Content/index.tsx","utils/apiMockAdapter/utils.js","utils/apiMockAdapter/index.js","App.tsx","index.tsx","context/DictionaryContext.tsx","components/Sidebar/Sidebar.module.scss","components/Header/Header.module.scss","utils/convertDataItem.ts","utils/hooks/useGetTablename.ts"],"names":["PrintPDFContext","React","createContext","usePrintPDFContext","useContext","PrintPDFContextProvider","children","useState","printMode","setPrintMode","dataRef","setDataRef","dataPrintRef","useMemo","setDataPrintRef","useCallback","refObject","dataPrintMode","setDataPrintMode","mode","Provider","value","defaultHeaders","apiMiddleware","dispatch","action","a","type","method","url","body","headers","test","axios","request","data","JSON","stringify","response","console","log","payload","useMetadataSelector","useSelector","state","metadataReducer","dataGetAction","tablename","urlApi","dataDeleteAction","dataAddAction","dataUpdateAction","getTableParameters","metadata","find","c","id","metadataGetAction","useDataSelector","dataReducer","LoadingComponent","indicator","style","fontSize","spin","className","classes","memo","ModalWithForm","title","okButtonTitle","isOpen","handleOk","handleClose","formItems","additionalButtons","initialValues","modalDictionary","Form","useForm","form","contextDictionary","useDictionaryContext","dictionary","setDictionary","useEffect","onOk","callback","validateFields","then","values","convertDataItem","catch","visible","onCancel","footer","danger","onClick","map","name","preserve","labelCol","span","wrapperCol","onFinish","onFinishFailed","formItem","Item","label","rules","valuePropName","includes","disabled","TextArea","allowClear","filterOption","option","RegExp","undefined","showSearch","options","Object","entries","text","format","showTime","mapDictionaryArrayToObject","array","fromEntries","tag","DataAddModal","onAddHandler","onClose","modalTablename","modalInitialValues","setFormItems","setInitialValues","setMetadata","metadataAction","metadataResponse","filter","forEach","validValues","getDataUrl","get","dictionaryResponse","prev","useGetMetaDictionary","modalTableMetadata","modalTableDictionary","contextMetadata","defaultData","d","defaultValue","initialData","m","sort","b","tableIndex","addMenuIndex","required","message","addMenuTitle","module","exports","modes","realData","DATE_FORMAT_FULLDATE","e","DATE_FORMAT_DATE","DATE_FORMAT_TIME","UserContext","UserContextProvider","email","login","user","setUser","showNotification","description","duration","notification","placement","initialState","isLoading","isError","metadataReducerLoading","metadataReducerError","error","statusText","metadataReducerResponse","sourceData","crudReduxDataUpdater","stateData","dataReducerLoading","dataReducerError","dataReducerResponse","reducers","combineReducers","storage","createStore","composeWithDevTools","applyMiddleware","thunk","StorageProvider","store","Header","useGetTablename","userContext","header","navigation","selectedKeys","theme","to","SubMenu","icon","UserOutlined","logout","LogoutOutlined","PrintPDF","print","useReactToPrint","content","document","getElementsByClassName","onAfterPrint","toggleOpen","handlePrint","list","onSubmit","setValue","setIsOpen","handleToggle","handleChange","target","handleSubmit","ModalPrintSelect","okButtonProps","Group","onChange","direction","optionTitle","optionValue","useModalWithSelect","PrinterOutlined","Sidebar","useDispatch","sidebarAction","setSidebarAction","isErrorData","isLoadingData","handleCloseModal","sidebar","PlusCircleTwoTone","twoToneColor","SettingOutlined","Index","DataTable","lazy","DataCalendar","Content","location","useLocation","navigate","useNavigate","pathname","path","element","fallback","SuspenseFallback","dataCounterFactory","counter","task","length","discussion","require","developers","projects","metaData","calendar","event","mock","MockAdapter","delayResponse","dataCount","replyPostWithOK","mockResponseConfig","parse","onGet","reply","onPut","onPatch","onDelete","onPost","status","App","main","basename","hostname","ReactDOM","render","StrictMode","DictionaryContext","getElementById","DictionaryContextProvider","dict","setDict","parameter","parameterDictionary","invertDictionary","invert","moment","join","split","Date","toLowerCase","setTablename","replace"],"mappings":"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","file":"static/js/main.a88b846e.chunk.js","sourcesContent":["import React, { useCallback, useContext, useMemo, useState } from \"react\";\r\n\r\nexport type TPrintMode = 'print' | 'all' | 'current' | undefined;\r\n\r\ninterface IPrintPDFContext {\r\n  dataPrintMode: TPrintMode;\r\n  setDataPrintMode: (mode:TPrintMode) => void;\r\n  dataPrintRef: React.RefObject<HTMLDivElement> | undefined;\r\n  setDataPrintRef: (dataRef: React.RefObject<HTMLDivElement>) => void;\r\n}\r\n\r\nconst PrintPDFContext = React.createContext<IPrintPDFContext>({} as IPrintPDFContext);\r\n\r\nexport const usePrintPDFContext = () => {\r\n  const context = useContext(PrintPDFContext);\r\n  return context;\r\n}\r\n\r\nexport const PrintPDFContextProvider: React.FC = ({ children }) => {\r\n  const [printMode, setPrintMode] = useState<TPrintMode>();\r\n  const [dataRef, setDataRef] = useState<React.RefObject<HTMLDivElement>>();\r\n\r\n  const dataPrintRef = useMemo(() => dataRef, [dataRef]);\r\n  const setDataPrintRef = useCallback((refObject) => setDataRef(refObject), []);\r\n\r\n  const dataPrintMode = useMemo(() => printMode, [printMode]);\r\n  const setDataPrintMode = useCallback((mode: TPrintMode) => setPrintMode(mode), []);\r\n\r\n  return (\r\n    <PrintPDFContext.Provider value={{\r\n      dataPrintMode,\r\n      setDataPrintMode,\r\n      dataPrintRef,\r\n      setDataPrintRef,\r\n    }}>\r\n      {children}\r\n    </PrintPDFContext.Provider>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { Middleware } from \"redux\";\r\n\r\nexport const defaultHeaders: HeadersInit = {\r\n  \"Content-type\": \"application/json\",\r\n};\r\n\r\nexport const apiMiddleware: Middleware =\r\n  () =>\r\n  (dispatch) =>\r\n  async (action: any) => {\r\n    const { type, method = \"GET\", url, body, headers = defaultHeaders } = action;\r\n    // console.log(action, type);\r\n\r\n    if (!/REQUEST/.test(type)) {\r\n      return dispatch(action);\r\n    }\r\n\r\n    dispatch({type: type + '_LOADING'});\r\n\r\n    try {\r\n      const response = await axios.request({\r\n        method,\r\n        url,\r\n        data: JSON.stringify(body),\r\n        headers,\r\n      });\r\n\r\n      console.log(JSON.stringify(body))\r\n\r\n      dispatch({type: type + '_RESPONSE', payload: response.data, method});\r\n    } catch (error) {\r\n      dispatch({type: type + '_ERROR', payload: error});\r\n    }\r\n  }\r\n","import { useSelector } from \"react-redux\";\r\nimport TReduxData from \"../../types/TReduxData\";\r\nimport metadataReducer from \"../reducers/data\";\r\n\r\nconst useMetadataSelector = () => {\r\n  const metadata: TReduxData = useSelector((state: ReturnType<typeof metadataReducer>) => state.metadataReducer);\r\n\r\n  return metadata;\r\n}\r\n\r\nexport default useMetadataSelector;","import { urlApi } from \"../../constants/constants\"\r\nimport TApiAction from \"../../types/TApiAction\"\r\nimport TApiActionBody from \"../../types/TApiActionBody\"\r\n\r\nconst type = 'DATA_REQUEST';\r\n\r\nexport const dataGetAction: (tablename: string) => TApiAction = (tablename) => {\r\n  return {\r\n    type,\r\n    url: `${urlApi}/${tablename}/`,\r\n    method: \"GET\"\r\n  }\r\n}\r\n\r\nexport const dataDeleteAction: \r\n  (tablename: string, body: TApiActionBody) => TApiAction = \r\n  (tablename, body) => {\r\n    return {\r\n      type,\r\n      url: `${urlApi}/${tablename}/`,\r\n      method: \"DELETE\",\r\n      body,\r\n    }\r\n}\r\n\r\nexport const dataAddAction: \r\n  (tablename: string, body: TApiActionBody) => TApiAction = \r\n  (tablename, body) => {\r\n    return {\r\n      type,\r\n      url: `${urlApi}/${tablename}/`,\r\n      method: \"PUT\",\r\n      body,\r\n    }\r\n}\r\n\r\nexport const dataUpdateAction: (tablename: string, body: TApiActionBody) => TApiAction = (tablename, body) => {\r\n  return {\r\n    type,\r\n    url: `${urlApi}/${tablename}/`,\r\n    method: \"PATCH\",\r\n    body,\r\n  }\r\n}","import { TTableParameters } from '../types/TTableParameters';\r\n\r\ntype TGetTableParameters = (\r\n  metadata: Record<string, any>[]\r\n) => TTableParameters\r\n\r\nconst getTableParameters: TGetTableParameters = (metadata) => {\r\n  return metadata.find((c) => c.id === 'specificParameters') as TTableParameters;\r\n}\r\n\r\nexport default getTableParameters;","import { urlApi } from \"../../constants/constants\";\r\nimport TApiAction from \"../../types/TApiAction\";\r\n\r\nconst metadataGetAction: (tablename: string) => TApiAction = (tablename) => {\r\n  return {\r\n    type: \"METADATA_REQUEST\",\r\n    url: `${urlApi}/${tablename}-meta/`,\r\n    method: \"GET\",\r\n  }\r\n}\r\n\r\nexport default metadataGetAction;","import { useSelector } from \"react-redux\";\r\nimport TReduxData from \"../../types/TReduxData\";\r\nimport dataReducer from \"../reducers/data\";\r\n\r\nconst useDataSelector = () => {\r\n  const data: TReduxData = useSelector((state: ReturnType<typeof dataReducer>) => state.dataReducer);\r\n\r\n  return data;\r\n}\r\n\r\nexport default useDataSelector;\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport classes from './LoadingComponent.module.scss';\r\n\r\nconst LoadingComponent: React.FC = () => {\r\n  return (\r\n    <Spin\r\n      indicator={<LoadingOutlined style={{ fontSize: 240 }} spin />}\r\n      // style={{ width: '100%', height: '100%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}\r\n      className={classes['loading-component']}\r\n    />\r\n  );\r\n};\r\n\r\nexport default React.memo(LoadingComponent);\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Modal, Form, Input, Button, DatePicker, TimePicker, Select, Checkbox } from 'antd';\r\nimport useDictionaryContext from '../../../context/DictionaryContext';\r\nimport { IFormItem } from '../../../types/IFormItem';\r\nimport { IModalWithForm } from '../../../types/IModalWithForm';\r\nimport { convertDataItem } from '../../../utils/convertDataItem';\r\nimport { TDictionary } from \"../../../types/TDictionary\";\r\n\r\nconst ModalWithForm: React.FC<IModalWithForm> = ({\r\n  title,\r\n  okButtonTitle = 'Сохранить',\r\n  isOpen,\r\n  handleOk,\r\n  handleClose,\r\n  formItems,\r\n  additionalButtons,\r\n  initialValues,\r\n  modalDictionary\r\n}) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const { dictionary: contextDictionary } = useDictionaryContext();\r\n  const [dictionary, setDictionary] = useState<TDictionary | null>(null);\r\n\r\n  useEffect(() => {\r\n    setDictionary(modalDictionary || contextDictionary);\r\n  }, [contextDictionary, modalDictionary])\r\n\r\n  const onOk =\r\n    (callback: (values: any) => void) =>\r\n    () => {\r\n      form\r\n        .validateFields()\r\n        .then((values) => {\r\n          if (dictionary) {\r\n            values = convertDataItem(dictionary, values, formItems, 'form');\r\n\r\n            callback(values);\r\n          }\r\n        })\r\n        .catch(console.log)\r\n    };\r\n\r\n  return (\r\n    isOpen ? (\r\n      <Modal\r\n        title={title}\r\n        visible={isOpen}\r\n        onOk={onOk(handleOk)}\r\n        onCancel={handleClose}\r\n        footer={[\r\n          <Button key='ModalWithForm-cancel-button' type=\"primary\" danger onClick={handleClose}>Отмена</Button>,\r\n\r\n          additionalButtons.map(({title, onClick}) => (\r\n            <Button\r\n              key={`ModalWithForm-${title}-button`}\r\n              onClick={onOk(onClick)}\r\n            >\r\n              {title}\r\n            </Button>\r\n          )),\r\n\r\n          <Button key='ModalWithForm-ok-button' type=\"primary\" onClick={onOk(handleOk)}>{okButtonTitle}</Button>,\r\n        ]}\r\n      >\r\n        <Form\r\n          name='basic'\r\n          preserve={false}\r\n          labelCol={{ span: 8 }}\r\n          wrapperCol={{ span: 16 }}\r\n          initialValues={initialValues ? initialValues : {}}\r\n          onFinish={console.log}\r\n          onFinishFailed={console.log}\r\n          form={form}\r\n        >\r\n          {\r\n            formItems.map((formItem: IFormItem) => (\r\n              <Form.Item\r\n                key={formItem.name}\r\n                label={formItem.label}\r\n                name={formItem.name}\r\n                rules={formItem.rules}\r\n                valuePropName={formItem.type === \"checkbox\" ? \"checked\" : \"value\"}\r\n              >\r\n                {\r\n                  (['string', 'number'].includes(formItem.type)) ?\r\n                    <Input disabled={formItem.disabled} /> :\r\n                  formItem.type === 'fulltext' ?\r\n                    <Input.TextArea disabled={formItem.disabled} /> :\r\n                  formItem.type === 'checkbox' ?\r\n                    <Checkbox disabled={formItem.disabled} /> :\r\n                  (['select', 'multi-select'].includes(formItem.type)) ? (\r\n                    <Select\r\n                      disabled={formItem.disabled}\r\n                      allowClear\r\n                      filterOption={(value: string, option) => RegExp(value, 'i').test(`${option?.label}`)}\r\n                      mode={formItem.type === 'multi-select' ? 'multiple' : undefined}\r\n                      showSearch\r\n                      options={\r\n                        dictionary\r\n                          ? Object.entries(dictionary[formItem.name])\r\n                              .map(([value, info]) => (\r\n                                { value, label: info.text }\r\n                              ))\r\n                          : []\r\n                      }\r\n                    />\r\n                  ) :\r\n                  formItem.type === 'date' ? (\r\n                    <DatePicker\r\n                      format=\"YYYY-MM-DD\"\r\n                      disabled={formItem.disabled}\r\n                    />\r\n                  ) :\r\n                  formItem.type === 'datetime' ? (\r\n                    <DatePicker\r\n                      format=\"YYYY-MM-DD HH:mm:ss\"\r\n                      disabled={formItem.disabled}\r\n                      showTime\r\n                    />\r\n                  ) :\r\n                  formItem.type === 'time' ? (\r\n                    <TimePicker\r\n                      format=\"HH:mm:ss\"\r\n                      disabled={formItem.disabled}\r\n                    />\r\n                  ) : null\r\n                }\r\n              </Form.Item>\r\n            ))\r\n          }\r\n        </Form>\r\n      </Modal>\r\n    ) : null\r\n  );\r\n}\r\n\r\nexport default ModalWithForm;\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { modes } from \"../../constants/constants\"\r\nimport { TGetDataUrl, TMetadataDictionary } from \"../../context/DictionaryContext\";\r\nimport { TData } from \"../../types/TData\";\r\nimport { TDictionary } from \"../../types/TDictionary\";\r\nimport { TObject } from \"../../types/TObject\";\r\nimport { defaultHeaders } from \"../../storages/middleware/apiMiddleware\";\r\nimport metadataGetAction from \"../../storages/actions/metadata\";\r\nimport { TDictionaryInfo } from \"../../types/TDictionaryInfo\";\r\n\r\nconst mapDictionaryArrayToObject = (array: Record<string, TDictionaryInfo>[]): TObject<TDictionaryInfo> => {\r\n  return Object.fromEntries(\r\n    array.map((value) => [value.value, {\r\n      text: value.text,\r\n      value: value.value,\r\n      tag: value?.tag\r\n    }])\r\n  )\r\n}\r\n\r\nexport const useGetMetaDictionary = (tablename?: typeof modes[number]['id'] ) => {\r\n  const [metadata, setMetadata] = useState<TData[] | null>(null);\r\n  const [dictionary, setDictionary] = useState<TDictionary | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (tablename) {\r\n      const metadataAction = metadataGetAction(tablename);\r\n\r\n      axios.request({\r\n        method: metadataAction.method,\r\n        url: metadataAction.url,\r\n        headers: defaultHeaders as any,\r\n      })\r\n        .then((metadataResponse: any) => {\r\n          setMetadata(metadataResponse.data);\r\n\r\n          metadataResponse.data\r\n            .filter(({ type }: {type: string}) => ['select', 'multi-select'].includes(type))\r\n            .forEach(({ id, validValues }: {id: string, validValues: TMetadataDictionary}) => {\r\n              if ((validValues as TGetDataUrl).getDataUrl) {\r\n                axios.get((validValues as TGetDataUrl).getDataUrl)\r\n                  .then((dictionaryResponse) => {\r\n                    setDictionary((prev) => {\r\n                      return {\r\n                        ...prev,\r\n                        [id]: mapDictionaryArrayToObject(dictionaryResponse.data as Record<string, TDictionaryInfo>[])\r\n                      }\r\n                    });\r\n                  })\r\n                  .catch(console.log)\r\n              } else if (validValues) {\r\n                setDictionary((prev) => {\r\n                  return {\r\n                    ...prev,\r\n                    [id]: mapDictionaryArrayToObject(validValues as Record<string, TDictionaryInfo>[])\r\n                  }\r\n                });\r\n              }\r\n            })\r\n        })\r\n    }\r\n  }, [tablename]);\r\n\r\n  return { metadata, dictionary };\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport ModalWithForm from '../../UI/ModalWithForm';\r\nimport getTableParameters from '../../../utils/getTableParameters';\r\nimport { IFormItem } from '../../../types/IFormItem';\r\nimport { TData } from '../../../types/TData';\r\nimport { TDictionary } from '../../../types/TDictionary';\r\nimport { useGetMetaDictionary } from '../../../utils/hooks/useGetMetaDictionary';\r\nimport useMetadataSelector from '../../../storages/selectors/metadata';\r\nimport useDictionaryContext from '../../../context/DictionaryContext';\r\nimport { convertDataItem } from '../../../utils/convertDataItem';\r\n\r\ninterface IDataAddModal {\r\n  isOpen: boolean;\r\n  onAddHandler: (data: TData) => void;\r\n  onClose: () => void;\r\n  modalTablename?: string;\r\n  modalInitialValues?: TData;\r\n}\r\n\r\nconst DataAddModal: React.FC<IDataAddModal> = ({\r\n  isOpen,\r\n  onAddHandler,\r\n  onClose,\r\n  modalTablename,\r\n  modalInitialValues\r\n}) => {\r\n  const [formItems, setFormItems] = useState<IFormItem[]>([]);\r\n  const [initialValues, setInitialValues] = useState<TData>({});\r\n  const [metadata, setMetadata] = useState<TData[] | null>(null);\r\n  const [dictionary, setDictionary] = useState<TDictionary | null>(null);\r\n\r\n  const { metadata: modalTableMetadata, dictionary: modalTableDictionary } = useGetMetaDictionary(modalTablename);\r\n  const { data: contextMetadata } = useMetadataSelector();\r\n  const { dictionary: contextDictionary } = useDictionaryContext();\r\n\r\n  useEffect(() => {\r\n    if (modalTableMetadata && modalTableDictionary) {\r\n      setMetadata(modalTableMetadata);\r\n      setDictionary(modalTableDictionary);\r\n    } else if (contextMetadata && contextDictionary) {\r\n      setMetadata(contextMetadata);\r\n      setDictionary(contextDictionary);\r\n    }\r\n  }, [\r\n    modalTableMetadata,\r\n    modalTableDictionary,\r\n    contextMetadata,\r\n    contextDictionary\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (formItems && metadata && dictionary) {\r\n      const defaultData: TData = Object.fromEntries(metadata\r\n        .filter(({id}) => id !== 'specificValue')\r\n        .map((d) => [d.id, d.defaultValue]))\r\n      const initialData = modalInitialValues ? modalInitialValues : defaultData;\r\n\r\n      setInitialValues(convertDataItem(dictionary, initialData, metadata, 'modalAdd'));\r\n    }\r\n  }, [metadata, formItems, modalInitialValues, dictionary]);\r\n\r\n  useEffect(() => {\r\n    if (metadata) {\r\n      setFormItems(metadata\r\n        .filter((m) => m.id !== 'specificParameters')\r\n        .sort((a, b) => a.tableIndex - b.tableIndex)\r\n        .map((m) => {\r\n          return {\r\n            label: m.title,\r\n            name: m.id,\r\n            type: m.type,\r\n            rules: m.addMenuIndex ? [{ required: true, message: 'Поле должно быть корректно заполнено!' }] : [],\r\n            disabled: m.id === 'id',\r\n          }\r\n      }));\r\n    }\r\n  }, [ metadata ]);\r\n\r\n  return (\r\n    metadata ? (\r\n      <ModalWithForm\r\n        title={getTableParameters(metadata).addMenuTitle || 'Добавить'}\r\n        okButtonTitle='Добавить'\r\n        isOpen={isOpen}\r\n        handleOk={onAddHandler}\r\n        handleClose={onClose}\r\n        formItems={formItems}\r\n        initialValues={initialValues}\r\n        additionalButtons={[]}\r\n        modalDictionary={dictionary}\r\n      />\r\n    ) : null\r\n  );\r\n};\r\n\r\nexport default DataAddModal;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading-component\":\"LoadingComponent_loading-component__21HvC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3JB43\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__3Q8P-\"};","export const modes = [\r\n  { id: 'task', value: 'Задачи', realData: true },\r\n  { id: 'discussion', value: 'Совещания', realData: true },\r\n  { id: 'calendar', value: 'Календарь', realData: true },\r\n  { id: 'event', value: 'Изменения', realData: true },\r\n];\r\n\r\nexport const mainModes = modes.filter((e) => e.realData).map((e) => e.id);\r\n\r\nexport const DATE_FORMAT_FULLDATE = 'DD MMMM YYYY, dddd';\r\nexport const DATE_FORMAT_DATE = 'YYYY-MM-DD';\r\nexport const DATE_FORMAT_TIME = 'HH:mm';\r\n\r\nexport const urlApi = '/smisplan-typescript/cgi';\r\nexport const TEST = true;\r\n","import React, { useState } from \"react\";\r\nimport TUser from \"../types/TUser\";\r\n\r\ninterface IUserContextProvider {\r\n  user: TUser | undefined;\r\n  setUser: (user: TUser) => void;\r\n}\r\n\r\nexport const UserContext = React.createContext<IUserContextProvider>({} as IUserContextProvider);\r\n\r\nexport const UserContextProvider: React.FC = ({children}) => {\r\n  const [user, setUser] = useState<TUser>({\r\n    email: \"puhskin@yandex.ru\",\r\n    name: \"Пушкин\",\r\n    login: \"pushkin\"\r\n  });\r\n\r\n  return (\r\n    <UserContext.Provider value={{ user, setUser }}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  )\r\n}\r\n","import { notification } from 'antd';\r\nimport INotification from \"../types/INotification\"\r\n\r\nconst showNotification = (action: INotification) => {\r\n  const { type, message, description, duration = 5 } = action;\r\n  notification[type]({\r\n    message: message,\r\n    description: description,\r\n    placement: 'topRight',\r\n    duration: duration\r\n  });\r\n}\r\n\r\nexport default showNotification;","import { Reducer } from 'redux';\r\nimport TApiReducerData from '../../types/TApiReducer';\r\nimport IFetchError from '../../types/IFetchError';\r\nimport TReduxData from '../../types/TReduxData';\r\nimport showNotification from '../../utils/showNotification';\r\n\r\nconst initialState: TReduxData = {\r\n  isLoading: false,\r\n  data: null,\r\n  isError: false,\r\n};\r\n\r\nconst metadataReducer: Reducer = (state = initialState, action: TApiReducerData) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case 'METADATA_REQUEST_LOADING':\r\n      return metadataReducerLoading();;\r\n\r\n    case 'METADATA_REQUEST_RESPONSE':\r\n      return metadataReducerResponse(payload);\r\n\r\n    case 'METADATA_REQUEST_ERROR':\r\n      return metadataReducerError(payload);;\r\n      \r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n\r\nconst metadataReducerLoading: () => TReduxData = () => {\r\n  return {\r\n    isLoading: true,\r\n    isError: false,\r\n    data: null\r\n  }\r\n};\r\n\r\nconst metadataReducerError: (error: IFetchError) => TReduxData = (error) => {\r\n  showNotification({\r\n    type: 'error',\r\n    message: 'Ошибка при загрузке данных',\r\n    description: error.message ? error.message : error.statusText,\r\n  });\r\n\r\n  return {\r\n    isLoading: false,\r\n    isError: true,\r\n    data: null\r\n  }\r\n};\r\n\r\nconst metadataReducerResponse: (sourceData: any) => TReduxData = (sourceData) => {\r\n  return {\r\n    isLoading: false,\r\n    data: sourceData,\r\n    isError: false\r\n  }\r\n}\r\n\r\nexport default metadataReducer;\r\n","import {THtmlMethod} from '../types/THtmlMethod';\r\nimport TReduxData from \"../types/TReduxData\";\r\nimport { TData } from \"../types/TData\";\r\n\r\nexport const crudReduxDataUpdater:\r\n  (method: THtmlMethod, stateData: TReduxData[\"data\"], data: TData | TData[] | null) => TReduxData[\"data\"] =\r\n  (method, stateData, data) => {\r\n    switch (method) {\r\n      case \"POST\":\r\n      case \"PUT\":\r\n        return stateData && data\r\n          ? [ ...stateData, data]\r\n          : []\r\n\r\n      case \"PATCH\":\r\n        return stateData && data\r\n          ? [ ...stateData.map((d) => d.id === (data as TData).id ? data : d) ]\r\n          : []\r\n\r\n      case \"DELETE\":\r\n        return stateData && data\r\n          ? stateData.filter(({id}) => id !== (data as TData).id)\r\n          : []\r\n\r\n      default:\r\n        return data\r\n          ? [...(data as TData[])]\r\n          : []\r\n    }\r\n  };\r\n","import { Reducer } from 'redux';\r\nimport TApiReducerData from '../../types/TApiReducer';\r\nimport IFetchError from '../../types/IFetchError';\r\nimport TReduxData from '../../types/TReduxData';\r\nimport showNotification from '../../utils/showNotification';\r\nimport { crudReduxDataUpdater } from \"../../utils/crudReduxUpdater\";\r\nimport { THtmlMethod } from \"../../types/THtmlMethod\";\r\n\r\nconst initialState: TReduxData = {\r\n  isLoading: false,\r\n  data: null,\r\n  isError: false,\r\n};\r\n\r\nconst dataReducer: Reducer = (state = initialState, action: TApiReducerData) => {\r\n  const { type, payload, method } = action;\r\n\r\n  console.log({ type, payload, method })\r\n\r\n  switch (type) {\r\n    case 'DATA_REQUEST_LOADING':\r\n      return dataReducerLoading(state);\r\n\r\n    case 'DATA_REQUEST_RESPONSE':\r\n      return dataReducerResponse(method as THtmlMethod, state, payload);\r\n\r\n    case 'DATA_REQUEST_ERROR':\r\n      return dataReducerError(state, payload);\r\n\r\n    default:\r\n      return {...state};\r\n  }\r\n};\r\n\r\nconst dataReducerLoading: (state: TReduxData) => TReduxData = (state) => {\r\n  return {\r\n    isLoading: true,\r\n    isError: false,\r\n    data: state.data,\r\n    // data: null,\r\n  }\r\n};\r\n\r\nconst dataReducerError:\r\n  (state: TReduxData, error: IFetchError) => TReduxData =\r\n  (state, error) => {\r\n  showNotification({\r\n    type: 'error',\r\n    message: 'Ошибка при загрузке данных',\r\n    description: error.message ? error.message : error.statusText,\r\n  });\r\n\r\n  return {\r\n    isLoading: false,\r\n    isError: true,\r\n    data: state.data,\r\n  }\r\n};\r\n\r\nconst dataReducerResponse:\r\n  (method: THtmlMethod, state: TReduxData, payload: any) => TReduxData =\r\n  (method, state, payload) => {\r\n  return {\r\n    isLoading: false,\r\n    data: crudReduxDataUpdater(method, state.data, payload),\r\n    isError: false\r\n  }\r\n}\r\n\r\nexport default dataReducer;\r\n","import { combineReducers } from \"redux\"\r\nimport metadataReducer from \"./metadata\";\r\nimport dataReducer from \"./data\";\r\n\r\nconst reducers = combineReducers({\r\n  dataReducer,\r\n  metadataReducer\r\n})\r\n\r\nexport default reducers;","import { applyMiddleware, createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { Provider } from \"react-redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { apiMiddleware } from \"./middleware/apiMiddleware\";\r\nimport reducers from \"./reducers\";\r\n\r\nexport const storage = createStore(reducers, composeWithDevTools(applyMiddleware(thunk, apiMiddleware)));\r\n\r\nexport const StorageProvider: React.FC = ({ children }) => {\r\n  return (\r\n    <Provider store={storage}>\r\n      {children}\r\n    </Provider>\r\n  );\r\n}","import { useContext } from 'react';\r\nimport { Menu } from 'antd';\r\nimport { UserOutlined, LogoutOutlined } from '@ant-design/icons';\r\nimport { modes } from '../../constants/constants';\r\nimport { UserContext } from '../../context/UserContext';\r\nimport { NavLink } from 'react-router-dom';\r\nimport useGetTablename from '../../utils/hooks/useGetTablename';\r\nimport classes from './Header.module.scss';\r\n\r\nconst Header: React.FC = () => {\r\n  const mode = useGetTablename();\r\n  const userContext = useContext(UserContext);\r\n\r\n  return (\r\n    <header className={classes.header}>\r\n      <nav className={classes.navigation}>\r\n        <Menu\r\n          selectedKeys={[mode]}\r\n          mode='horizontal'\r\n          theme='dark'\r\n        >\r\n          {\r\n            modes.map((mode) => (\r\n              <Menu.Item key={mode.id}>\r\n                <NavLink to={`/${mode.id}`}>{mode.value}</NavLink>\r\n              </Menu.Item>\r\n            ))\r\n          }\r\n        </Menu>\r\n      </nav>\r\n\r\n      <Menu\r\n        mode='horizontal'\r\n        theme='dark'\r\n        className={classes['header-login']}\r\n      >\r\n        <Menu.SubMenu\r\n          icon={<UserOutlined />}\r\n          title={userContext.user?.name}\r\n          key='user-options'\r\n        >\r\n          <Menu.Item\r\n            key='logout'\r\n            className={classes.logout}\r\n            icon={<LogoutOutlined />}\r\n          >\r\n            Выход\r\n          </Menu.Item>\r\n        </Menu.SubMenu>\r\n      </Menu>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { useReactToPrint } from 'react-to-print';\r\nimport { Tooltip } from 'antd';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport { TPrintMode, usePrintPDFContext } from '../../../context/PrintPDFContext';\r\nimport { useCallback, useEffect, useMemo } from 'react';\r\nimport { useModalWithSelect } from '../ModalWithSelect';\r\n\r\nexport const PrintPDF: React.FC = () => {\r\n  const { dataPrintRef, setDataPrintMode, dataPrintMode } = usePrintPDFContext();\r\n\r\n  const handleOpen = () => toggleOpen(true);\r\n\r\n  const print = useReactToPrint({\r\n    // content: () => dataPrintRef ? dataPrintRef.current : null,\r\n    content: () => (\r\n      dataPrintRef\r\n        ? document.getElementsByClassName('ant-table-container')[0]\r\n        : null\r\n    ),\r\n    onAfterPrint: () => {\r\n      setDataPrintMode(undefined)\r\n      toggleOpen(false);\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (['print', 'current'].includes(dataPrintMode as string)) print();\r\n  }, [print, dataPrintMode]);\r\n\r\n  const handlePrint = useCallback((mode: TPrintMode) => {\r\n    setDataPrintMode(mode);\r\n  }, [setDataPrintMode]);\r\n\r\n  const listOptions = useMemo(() => [\r\n    {\r\n      optionTitle: 'Текущая страница',\r\n      optionValue: 'current',\r\n    },\r\n    {\r\n      optionTitle: 'Все страницы',\r\n      optionValue: 'all',\r\n    }\r\n  ], []);\r\n\r\n  const modalTitle = 'Распечатать все страницы или текущую?';\r\n  const {toggleOpen, ModalPrintSelect} = useModalWithSelect(modalTitle, listOptions, handlePrint);\r\n\r\n  return (\r\n    <Tooltip\r\n      placement='bottomLeft'\r\n      title='Печать в PDF'\r\n      className='tooltip'\r\n    >\r\n      {ModalPrintSelect}\r\n\r\n      <PrinterOutlined onClick={handleOpen} style={{ fontSize: '30px' }}/>\r\n    </Tooltip>\r\n  )\r\n}\r\n","import { useCallback, useMemo, useState } from 'react';\r\nimport { Modal, Radio, RadioChangeEvent, Space } from 'antd';\r\nimport { TPrintMode } from '../../../context/PrintPDFContext';\r\n\r\ntype TUseModalWithSelect = (\r\n  title: string,\r\n  list: {\r\n    optionTitle: string,\r\n    optionValue: string,\r\n  }[],\r\n  onSubmit: (value: TPrintMode) => void,\r\n) => {\r\n  toggleOpen: (mode: boolean) => void,\r\n  ModalPrintSelect: JSX.Element,\r\n  value: string | number | boolean | undefined\r\n};\r\n\r\nexport const useModalWithSelect: TUseModalWithSelect = (title, list, onSubmit) => {\r\n  const [value, setValue] = useState<TPrintMode>();\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n\r\n  const handleToggle = useCallback((mode: boolean) => setIsOpen(mode), [])\r\n\r\n  const handleChange = (e: RadioChangeEvent) => setValue(e.target.value);\r\n  const handleSubmit = useCallback(() => onSubmit(value), [onSubmit, value]);\r\n  const handleClose = useCallback(() => () => handleToggle(false), [handleToggle]);\r\n\r\n  const ModalPrintSelect = useMemo(() => (\r\n    <Modal\r\n      title={title}\r\n      onOk={handleSubmit}\r\n      onCancel={handleClose}\r\n      visible={isOpen}\r\n      okButtonProps={{ disabled: !value }}\r\n    >\r\n      <Radio.Group onChange={handleChange} value={value}>\r\n        <Space direction=\"vertical\">\r\n          {\r\n            list.map(({optionTitle, optionValue}) => (\r\n              <Radio key={optionValue} value={optionValue}>{optionTitle}</Radio>\r\n            ))\r\n          }\r\n        </Space>\r\n      </Radio.Group>\r\n    </Modal>\r\n  ), [title, list, value, isOpen, handleClose, handleSubmit]);\r\n\r\n  return {\r\n    toggleOpen: handleToggle,\r\n    ModalPrintSelect,\r\n    value\r\n  };\r\n}\r\n","import React, { memo, useEffect, useState } from 'react';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Menu, Tooltip } from 'antd';\r\nimport {\r\n  SettingOutlined,\r\n  PlusCircleTwoTone,\r\n} from '@ant-design/icons';\r\nimport DataAddModal from '../Modals/DataAddModal';\r\nimport {dataAddAction} from \"../../storages/actions/data\";\r\nimport useGetTablename from \"../../utils/hooks/useGetTablename\";\r\nimport useDataSelector from \"../../storages/selectors/data\";\r\nimport { PrintPDF } from '../UI/PrintPDF';\r\nimport classes from './Sidebar.module.scss';\r\n\r\nconst Sidebar: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const [sidebarAction, setSidebarAction] = useState<string>('');\r\n\r\n  const tablename = useGetTablename();\r\n\r\n  const {isError: isErrorData, isLoading: isLoadingData} = useDataSelector();\r\n\r\n  const handleAddData = () => setSidebarAction('addData');\r\n\r\n  const handleCloseModal = () => setSidebarAction('');\r\n\r\n  useEffect(() => {\r\n    if (!isErrorData && !isLoadingData) handleCloseModal();\r\n  }, [isErrorData, isLoadingData])\r\n\r\n  return (\r\n    <Menu\r\n      mode='vertical'\r\n      theme='dark'\r\n      className={classes.sidebar}\r\n      selectedKeys={[sidebarAction]}\r\n    >\r\n      <DataAddModal\r\n        isOpen={sidebarAction === 'addData'}\r\n        onAddHandler={(data) => {\r\n          dispatch(dataAddAction(tablename, data));\r\n        }}\r\n        onClose={handleCloseModal}\r\n      />\r\n\r\n      <Menu.Item key='addData' className={classes['sidebar__menu-item']}>\r\n        <Tooltip placement='bottomLeft' title='Добавить' className='tooltip'>\r\n          <PlusCircleTwoTone\r\n            className={classes['sidebar__add-icon']}\r\n            style={{ fontSize: '30px' }}\r\n            twoToneColor='#52c41a'\r\n            onClick={handleAddData}\r\n          />\r\n        </Tooltip>\r\n      </Menu.Item>\r\n\r\n      <Menu.Item key='printPDF' className={classes['sidebar__menu-item']}>\r\n        <PrintPDF />\r\n      </Menu.Item>\r\n\r\n      <Menu.SubMenu key='settings'\r\n        className={classes['sidebar__menu-submenu']}\r\n        icon={<SettingOutlined style={{ fontSize: '30px' }} />}\r\n      >\r\n        <Menu.Item key='color-scheme'>Цветовая тема</Menu.Item>\r\n        <Menu.Item key='manual'>Инструкция</Menu.Item>\r\n      </Menu.SubMenu>\r\n    </Menu>\r\n  );\r\n};\r\n\r\nexport default memo(Sidebar);\r\n","import React from 'react';\r\n// import { TableRow, TableCell } from '@material-ui/core';\r\nimport LoadingComponent from '../LoadingComponent';\r\n\r\ntype TSuspenseFallback = {\r\n  type: 'loading' | 'textNode';\r\n};\r\n\r\nconst Index: React.FC<TSuspenseFallback> = ({ type }) => {\r\n  return (\r\n    <>\r\n      {type === 'loading' && <LoadingComponent />}\r\n      {type === 'textNode' && <p>...</p>}\r\n      {/* {type === 'row' && (\r\n        <TableRow>\r\n          <TableCell>...</TableCell>\r\n        </TableRow>\r\n      )} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(Index);\r\n","import { Suspense, lazy, useEffect } from 'react';\r\nimport { Routes, Route, useLocation, useNavigate } from 'react-router-dom';\r\nimport Sidebar from '../Sidebar';\r\nimport SuspenseFallback from '../UI/SuspenseFallback';\r\nimport classes from './Content.module.scss';\r\n\r\nconst DataTable = lazy(() => import('../DataTable'));\r\nconst DataCalendar = lazy(() => import('../DataCalendar'));\r\n\r\nconst Content: React.FC = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (location.pathname === '/') navigate('/task');\r\n  }, [location, navigate]);\r\n\r\n  return (\r\n    <main className={classes.content}>\r\n      <Sidebar />\r\n      <Routes >\r\n        <Route path=\"calendar\"\r\n          element={\r\n            <Suspense fallback={<SuspenseFallback type=\"loading\" />}>\r\n              <DataCalendar mode='discussion'/>\r\n            </Suspense>\r\n          }\r\n        />\r\n\r\n        <Route path=\"*\"\r\n          element={\r\n            <Suspense fallback={<SuspenseFallback type=\"loading\" />}>\r\n              <DataTable />\r\n            </Suspense>\r\n          }\r\n        />\r\n      </Routes >\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","export const dataCounterFactory = (data, mode) => {\r\n  const START_COUNT = {\r\n    task: data.task.length,\r\n    discussion: data.discussion.length,\r\n  }\r\n  let counter = START_COUNT[mode];\r\n\r\n  const increase = () => ++counter;\r\n\r\n  return increase;\r\n}\r\n","import axios from 'axios';\r\nimport MockAdapter from 'axios-mock-adapter';\r\nimport { urlApi } from '../../constants/constants';\r\nimport { dataCounterFactory } from './utils';\r\n\r\nconst user = require('../../constants/dummyData/user.json');\r\nconst developers = require('../../constants/dummyData/developers.json');\r\nconst projects = require('../../constants/dummyData/projects.json');\r\n\r\nconst metaData = {\r\n  task: null,\r\n  discussion: null,\r\n  calendar: null,\r\n  event: null,\r\n};\r\n\r\nmetaData.task = require('../../constants/dummyData/task_meta.json');\r\nmetaData.discussion = require('../../constants/dummyData/discussion_meta.json');\r\nmetaData.calendar = require('../../constants/dummyData/calendar_meta.json');\r\nmetaData.event = require('../../constants/dummyData/event_meta.json');\r\n\r\nconst data = {\r\n  task: null,\r\n  discussion: null,\r\n  calendar: null,\r\n  event: null,\r\n};\r\n\r\ndata.task = require('../../constants/dummyData/task.json');\r\ndata.discussion = require('../../constants/dummyData/discussion.json');\r\ndata.calendar = require('../../constants/dummyData/calendar.json');\r\ndata.event = require('../../constants/dummyData/event.json');\r\n\r\nconst mock = new MockAdapter(axios, { delayResponse: 100 });\r\n\r\nconst dataCount = {\r\n  task: dataCounterFactory(data, \"task\"),\r\n  discussion: dataCounterFactory(data, \"discussion\"),\r\n};\r\n\r\nconst replyPostWithOK = (mode) => (mockResponseConfig) => {\r\n  const body = JSON.parse(mockResponseConfig.data);\r\n  return [200, { id: dataCount[mode](), ...body}]\r\n}\r\n\r\nexport default function setMockAdapter() {\r\n  // get basic information\r\n  mock.onGet(`${urlApi}/user/`).reply(200, user);\r\n  mock.onGet(`${urlApi}/developer/`).reply(200, developers);\r\n  mock.onGet(`${urlApi}/project/`).reply(200, projects);\r\n\r\n  // get meta data information\r\n  mock.onGet(`${urlApi}/task-meta/`).reply(200, metaData.task);\r\n  mock.onGet(`${urlApi}/discussion-meta/`).reply(200, metaData.discussion);\r\n  mock.onGet(`${urlApi}/calendar-meta/`).reply(200, metaData.calendar);\r\n  mock.onGet(`${urlApi}/event-meta/`).reply(200, metaData.event);\r\n\r\n  // get data\r\n  // mock.onGet(`${urlApi}/task/get-discussions/`).reply(200, data.task);\r\n  mock.onGet(`${urlApi}/task/`).reply(200, data.task);\r\n  mock.onGet(`${urlApi}/discussion/`).reply(200, data.discussion);\r\n  mock.onGet(`${urlApi}/calendar/`).reply(200, data.calendar);\r\n  mock.onGet(`${urlApi}/event/`).reply(200, data.event);\r\n\r\n  // put data\r\n  // mock.onPut(`${urlApi}/task/`).reply(404);\r\n  mock.onPut(`${urlApi}/task/`).reply(replyPostWithOK(\"task\"));\r\n  mock.onPut(`${urlApi}/discussion/`).reply(replyPostWithOK(\"discussion\"));\r\n\r\n  // patch data\r\n  mock.onPatch(`${urlApi}/task/`).reply(replyPostWithOK(\"task\"));\r\n  mock.onPatch(`${urlApi}/discussion/`).reply(replyPostWithOK(\"discussion\"));\r\n\r\n  // delete data\r\n  mock.onDelete(`${urlApi}/task/`).reply(replyPostWithOK(\"task\"));\r\n  mock.onDelete(`${urlApi}/discussion/`).reply(replyPostWithOK(\"discussion\"));\r\n\r\n  // post data\r\n  mock.onPost(`${urlApi}/task/`).reply(200, { status: 'OK', error: '' });\r\n  mock.onPost(`${urlApi}/discussion/`).reply(200, { status: 'OK', error: '' });\r\n}\r\n\r\nexport const removeMockAdapter = () => mock.restore();\r\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Content from \"./components/Content\";\nimport classes from './App.module.scss';\n\nimport setMockAdapter from './utils/apiMockAdapter';\nsetMockAdapter();\n\nconst App: React.FC = () => {\n  return (\n    <div className={classes.main}>\n      <Header />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { UserContextProvider } from './context/UserContext';\nimport { StorageProvider } from './storages/storage';\nimport { DictionaryContextProvider } from './context/DictionaryContext';\nimport { PrintPDFContextProvider } from './context/PrintPDFContext';\nimport App from './App';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nconst basename: string = document.location.hostname === 'document.location.hostname'\n  ? '/smisplan-typescript/'\n  : '/';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={basename}>\n      <UserContextProvider>\n        <DictionaryContextProvider>\n          <StorageProvider>\n            <PrintPDFContextProvider>\n              <App />\n            </PrintPDFContextProvider>\n          </StorageProvider>\n        </DictionaryContextProvider>\n      </UserContextProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import axios from \"axios\";\r\nimport React, { useCallback, useContext, useMemo, useState } from \"react\";\r\nimport { TDictionary } from \"../types/TDictionary\";\r\nimport { TDictionaryInfo } from \"../types/TDictionaryInfo\";\r\nimport { TObject } from \"../types/TObject\";\r\n\r\nexport type TGetDataUrl = { getDataUrl: string };\r\nexport type TMetadataDictionary = Record<string, TDictionaryInfo>[] | TGetDataUrl;\r\n\r\ninterface IDictionaryContext {\r\n  dictionary: TDictionary;\r\n  setDictionary: (parameter: string, parameterDictionary: TMetadataDictionary) => void;\r\n};\r\n\r\nconst mapDictionaryArrayToObject = (array: Record<string, TDictionaryInfo>[]): TObject<TDictionaryInfo> => {\r\n  return Object.fromEntries(\r\n    array.map((value) => [value.value, {\r\n      text: value.text,\r\n      value: value.value,\r\n      tag: value?.tag\r\n    }])\r\n    // array.map((value) => [value.value, value.text])\r\n  )\r\n}\r\n\r\nconst DictionaryContext = React.createContext<IDictionaryContext>({} as IDictionaryContext);\r\n\r\nconst useDictionaryContext = () => {\r\n  const context = useContext(DictionaryContext);\r\n  return context;\r\n}\r\n\r\nexport const DictionaryContextProvider: React.FC = ({children}) => {\r\n  const [dict, setDict] = useState<IDictionaryContext[\"dictionary\"]>({});\r\n\r\n  const dictionary = useMemo(() => dict, [dict]);\r\n\r\n  const setDictionary = useCallback((\r\n    parameter: string,\r\n    parameterDictionary: TMetadataDictionary\r\n  ) => {\r\n    if ((parameterDictionary as TGetDataUrl).getDataUrl) {\r\n      const url = (parameterDictionary as TGetDataUrl).getDataUrl;\r\n\r\n      axios.get(url)\r\n        .then((response) => {\r\n          setDict((prev) => {\r\n            return {\r\n              ...prev,\r\n              [parameter]: mapDictionaryArrayToObject(response.data as Record<string, TDictionaryInfo>[])\r\n            }\r\n          });\r\n        })\r\n        .catch(console.log)\r\n    } else {\r\n      setDict((prev) => {\r\n        return {\r\n          ...prev,\r\n          [parameter]: mapDictionaryArrayToObject(parameterDictionary as Record<string, TDictionaryInfo>[])\r\n        }\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <DictionaryContext.Provider value={{\r\n      dictionary,\r\n      setDictionary\r\n    }}>\r\n      {children}\r\n    </DictionaryContext.Provider>\r\n  );\r\n}\r\n\r\nexport default useDictionaryContext;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__2gC4b\",\"sidebar__menu-item\":\"Sidebar_sidebar__menu-item__1hyOG\",\"sidebar__menu-submenu\":\"Sidebar_sidebar__menu-submenu__27xks\",\"sidebar__add-icon\":\"Sidebar_sidebar__add-icon__1xUJM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3l_8K\",\"navigation\":\"Header_navigation__3dC_4\",\"logout\":\"Header_logout__2oRZS\",\"header-login\":\"Header_header-login__3woyD\"};","import moment from \"moment\";\r\nimport { invert } from \"lodash\";\r\nimport { TData } from \"../types/TData\"\r\nimport { TDictionary } from \"../types/TDictionary\"\r\n\r\ntype TConvertDataItem = (\r\n  dictionary: TDictionary,\r\n  data: TData,\r\n  metadata: TData[],\r\n  mode: 'form' | 'table' | 'modalEdit' | 'modalAdd',\r\n) => TData;\r\n\r\nexport const convertDataItem: TConvertDataItem = (dictionary, data, metadata, mode) => {\r\n  return Object.fromEntries(metadata\r\n    .filter((m) => m.id !== 'specificParameters')\r\n    .map((m) => {\r\n      const type = m.type;\r\n      const name = mode === 'form' ? m.name : m.id;\r\n      let invertDictionary: Record<string, string> = {};\r\n      if (dictionary[name]) {\r\n        invertDictionary = invert(\r\n          Object.fromEntries(Object.entries(dictionary[name]).map(([key, info]) => [key, info.text]))\r\n        );\r\n      }\r\n\r\n      if (data[name]) {\r\n        if (mode === 'form') {\r\n          switch (type) {\r\n            case 'date':\r\n              return [name, moment(data[name]).format('YYYY-MM-DD')];\r\n\r\n            case 'time':\r\n              return [name, moment(data[name]).format('HH:mm:ss')];\r\n\r\n            case 'datetime':\r\n              return [name, moment(data[name]).format('YYYY-MM-DD HH:mm:ss')];\r\n\r\n            case 'multi-select':\r\n              return [name, data[name].join(',')];\r\n          }\r\n        } else if (mode === 'table') {\r\n          switch (type) {\r\n            case 'select':\r\n            case 'multi-select':\r\n              return [\r\n                name,\r\n                data[name]?.split(', ')?.map((d: string) => invertDictionary[d])?.join(',')\r\n              ]\r\n          }\r\n        } else if (mode === 'modalEdit') {\r\n          switch (type) {\r\n            case 'date':\r\n            case 'datetime':\r\n              return [name, moment(new Date(data[name]))]\r\n\r\n            case 'time':\r\n              return [name, moment(new Date('1970-01-01 '+ data[name]))]\r\n\r\n            case 'select':\r\n              return [name, invertDictionary[data[name]]]\r\n\r\n            case 'multi-select':\r\n              return [\r\n                name,\r\n                data[name].split(/, ?/).map((d: string) => invertDictionary[d])\r\n              ]\r\n\r\n            case 'checkbox':\r\n              return [\r\n                name,\r\n                data[name].toLowerCase() === 'да'\r\n              ]\r\n\r\n            default:\r\n              return [name, data[name]]\r\n          }\r\n        } else if (mode === 'modalAdd') {\r\n          switch (type) {\r\n            case 'date':\r\n            case 'datetime':\r\n            case 'time':\r\n              return [name, moment(new Date())]\r\n\r\n            case 'select':\r\n              return [name, data[name]]\r\n\r\n            case 'multi-select':\r\n              return [\r\n                name,\r\n                data[name].split(/, ?/)\r\n              ]\r\n\r\n            default:\r\n              return [name, data[name]]\r\n          }\r\n        }\r\n      } else {\r\n        return [name, undefined]\r\n      }\r\n\r\n      return [name, data[name]];\r\n    }))\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst useGetTablename = () => {\r\n  const [ tablename, setTablename ] = useState<string>('task');\r\n\r\n  const location = useLocation();\r\n  \r\n  useEffect(() => {\r\n    if (location.pathname) {\r\n      setTablename(location.pathname.replace(/\\/(.+?)(\\/|$)/, '$1'));\r\n    }\r\n  }, [location]);\r\n\r\n  return tablename\r\n}\r\n\r\nexport default useGetTablename;"],"sourceRoot":""}